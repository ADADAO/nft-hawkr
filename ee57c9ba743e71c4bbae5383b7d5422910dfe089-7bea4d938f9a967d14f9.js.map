{"version":3,"file":"ee57c9ba743e71c4bbae5383b7d5422910dfe089-7bea4d938f9a967d14f9.js","mappings":"2HACA,IAEIA,EAAU,CACVC,WAHa,2CAMjB,O,oHCDMC,EAA2B,oBAAXC,QAA0BA,OAAOD,OA+LnDE,EAAqB,KAMnBC,EAAgB,CAQpBC,sBAAuB,SAACC,EAASC,EAASC,EAASC,GACjDN,EAAqB,CACnBG,QAASA,EACTC,QAASA,EACTC,QAASA,EACTC,UAAWA,IAWfC,cAAe,SAACC,EAAQC,EAASC,EAAOC,GACtC,QADsD,IAAhBA,IAAAA,EAAS,KAC1CX,EACH,MAAM,IAAIY,MACR,6DAQJ,IALA,IAAMC,EACJf,EAAOW,EAAQK,OAAShB,EAAOE,EAAmBG,SAEhDY,EAASC,EAAAA,EAAAA,QAAAA,MAAAA,IAAyBA,EAAAA,EAAAA,QAAAA,OAAAA,SAA+B,MAE5DC,EAAI,EAAGA,EAAIN,EAAOO,OAAQD,IACjCF,EAASI,EAAWR,EAAOM,GAAGG,SAASL,SAAUA,GAiBnD,IAbA,IAAIM,EAAgB,CAClBC,WAAU,OAAKX,GACfY,WAAU,OAAKf,GACfgB,OAAQ,GACRT,OAAQA,GAGNU,EAoSR,SAA6BhB,GAK3B,IAJA,IAAIiB,EAAqBV,EAAAA,EAAAA,QAAAA,MAAAA,IACvBA,EAAAA,EAAAA,QAAAA,OAAAA,SAA+B,MAGxBC,EAAI,EAAGA,EAAIR,EAAQK,MAAOG,IACjCS,EAAqBP,EACnBV,EAAQkB,IAAIV,GAAGF,SACfW,GAIJ,OAAOA,EAhTsBE,CAAoBnB,GAG3CoB,EAgUR,SAAsBC,GACpB,IAAIC,EAAe,GAEnB,GAAID,EAAQE,aAGV,IAFA,IAAIC,EAAKH,EAAQE,aAERf,EAAI,EAAGA,EAAIgB,EAAGC,OAAOpB,MAAOG,IAGnC,IAFA,IAAIkB,EAAaF,EAAGC,OAAOP,IAAIV,GAEtBmB,EAAI,EAAGA,EAAIH,EAAGN,IAAIQ,GAAYD,OAAOpB,MAAOsB,IAAK,CACxD,IAAIC,EAAUrB,EAAAA,EAAAA,QAAAA,OAAAA,MACVsB,EAAYL,EAAGN,IAAIQ,GAAYD,OAAOP,IAAIS,GAE9CC,EAAQE,OACNvB,EAAAA,EAAAA,QAAAA,UAAAA,WAAoCsB,EAAUE,YAC9CxB,EAAAA,EAAAA,QAAAA,OAAAA,WACEiB,EAAGN,IAAIQ,GAAYR,IAAIW,GAAWE,aAItC,IAAIC,EAAczB,EAAAA,EAAAA,QAAAA,WAAAA,MAClByB,EAAYF,OACVvB,EAAAA,EAAAA,QAAAA,WAAAA,WAAqCmB,EAAWK,YAChDH,GAEF,IAAIK,EAAS1B,EAAAA,EAAAA,QAAAA,MAAAA,IACXA,EAAAA,EAAAA,QAAAA,OAAAA,SAA+B,MAEjC0B,EAAOC,eAAeF,GAEtBV,EAAaa,KAAKF,GAexB,OATAX,EAAec,EAAed,EAAc,SAG/Ba,KACX5B,EAAAA,EAAAA,QAAAA,MAAAA,IACEA,EAAAA,EAAAA,QAAAA,OAAAA,WAAiCc,EAAQgB,OAAON,cAI7CT,EA7WqBA,CAAaN,GAG9BR,EAAI,EAAGA,EAAIY,EAAoBX,OAAQD,IAC9C8B,EAAa1B,EAAeQ,EAAoBZ,IAEhDI,EAAgB2B,EACd3B,EACAQ,EAAoBZ,GACpBP,EACAG,GAKJgB,EAAsBgB,EAAehB,GAErC,IAAK,IAAIZ,EAAI,EAAGA,EAAIY,EAAoBX,OAAQD,IAAK,CACnD8B,EAAa1B,EAAeQ,EAAoBZ,IAEhD,IAAIgC,EAAQ,GACZA,EAAMC,MAAQlC,EAAAA,EAAAA,QAAAA,MAAAA,IACZA,EAAAA,EAAAA,QAAAA,OAAAA,SAA+B,MAE9BmC,YAAYtB,EAAoBZ,IAChCkC,YAAYtB,EAAoBZ,IACnCgC,EAAMG,QAAUpC,EAAAA,EAAAA,QAAAA,MAAAA,IACdA,EAAAA,EAAAA,QAAAA,OAAAA,SAA+B,MAE9BmC,YAAYF,EAAMC,OAClBC,YAAYtB,EAAoBZ,IAEnCoC,EACEhC,EACAQ,EAAoBZ,GACpBP,EAAQW,EAAcC,UAAUJ,OAChC+B,GAKJ,GAAI5B,EAAcE,UAAUL,OAAS,EAAG,CACtC,IAAMoC,EAASjC,EAAcN,OAAOwC,YAAY9B,GAE5C+B,EAAYxC,EAAAA,EAAAA,QAAAA,MAAAA,IACdA,EAAAA,EAAAA,QAAAA,iBACEsC,EACAtC,EAAAA,EAAAA,QAAAA,OAAAA,SAA+BhB,EAAmBG,WAIlDsD,EACF3D,EAAOE,EAAmBI,SACxBN,EAAOE,EAAmBM,WAC5BR,EAAOE,EAAmBK,SAQ5B,GANAoD,EAASzC,EAAAA,EAAAA,QAAAA,MAAAA,IACPA,EAAAA,EAAAA,QAAAA,OAAAA,SAA+ByC,EAAOC,aAKpCC,EAAQL,EAFZE,EAAYA,EAAUL,YAAYM,IAED,EAAG,CAElC,IAAMG,EAASJ,EACZD,YAAYvC,EAAAA,EAAAA,QAAAA,MAAAA,IAAyBsC,EAAOR,SAC5CK,YAAYnC,EAAAA,EAAAA,QAAAA,MAAAA,IAAyBK,EAAcN,OAAO+B,SAE7DC,EAAa1B,EAAeuC,GAC5BvC,EAAgB2B,EAAO3B,EAAeuC,EAAQlD,EAAOG,IAIzD,MAAO,CACLgD,MAAOxC,EAAcC,UACrBF,OAAQX,EACRc,UAAWF,EAAcE,UACzBR,OAAQM,EAAcN,OACtBuC,OAAQjC,EAAcN,OAAOwC,YAAY9B,MAgB/C,SAASuB,EAAO3B,EAAeyC,EAAcpD,EAAOqD,GAClD,IACE1C,EAAgB2C,EAmapB,SAA4B3C,GAC1B,MAAO,CACLC,UAAW2C,EAAc5C,EAAcC,WACvCC,UAAW0C,EAAc5C,EAAcE,WACvCC,OAAQyC,EAAc5C,EAAcG,QACpCT,OAAQmD,EAAW7C,EAAcN,SAva/BoD,CAAmB9C,GACnByC,EACApD,EAAQW,EAAcC,UAAUJ,OAChC6C,GAEF,MAAOK,GACP,GAAkB,yBAAdA,EAAEC,QASJ,MAAMD,EAPN/C,EA2EN,SAAoBA,EAAeyC,EAAcpD,EAAOqD,GAEtD1C,EAAcG,OAASH,EAAcG,OAAO8C,MAAK,SAACC,EAAGC,GACnD,OAAOC,OACLC,EAAkBZ,EAAcU,EAAEpD,SAASL,UACzC2D,EAAkBZ,EAAcS,EAAEnD,SAASL,cAIjD,EAAG,CACD,GAAIL,GAAS,EACX,MAAM,IAAIE,MAAM,wBAGlB,GAAIS,EAAcG,OAAON,QAAU,EAAG,CACpC,GAAIyD,EAAeb,EAAczC,EAAcN,OAAQ,EAAG,GACxD,MAAM,IAAIH,MAAM,kBAElB,MAAM,IAAIA,MAAM,oBAIlB,IAAIgE,EAAOvD,EAAcG,OAAOqD,OAAO,EAAG,GAAGC,MAE7CzD,EAAcC,UAAUsB,KAAKgC,GAC7BvD,EAAcN,OAASI,EACrByD,EAAKxD,SAASL,SACdM,EAAcN,QAGhBL,WAECiE,EACCb,EACAzC,EAAcN,OACdgD,EACA1C,EAAcG,OAAON,OAAS,IAWlC,OANAG,EAAcE,UAAd,kBACKF,EAAcE,YADnB,OAEKF,EAAcG,SAEnBH,EAAcG,OAAS,GAEhBH,EA1Ha0D,CACd1D,EACAyC,EACApD,EAAQW,EAAcC,UAAUJ,OAChC6C,GAON,OAAO1C,EAcT,SAAS2C,EAAa3C,EAAeyC,EAAcpD,EAAOqD,GACxD,IAAIiB,EAAa3D,EAAcG,OAAON,OAEtC,GACEyD,EAAeb,EAAczC,EAAcN,OAAQgD,EAAciB,GAOjE,OALA3D,EAAcE,UAAd,kBACKF,EAAcE,YADnB,OAEKF,EAAcG,SAEnBH,EAAcG,OAAS,GAChBH,EAGT,GAAIX,GAAS,EACX,MAAM,IAAIE,MAAM,wBAGlB,GAAIoE,GAAc,EAAG,CACnB,GAAIL,EAAeb,EAAczC,EAAcN,OAAQ,EAAG,GACxD,MAAM,IAAIH,MAAM,kBAElB,MAAM,IAAIA,MAAM,oBAIlB,IAAIgE,EAAOvD,EAAcG,OACtBqD,OAAOI,KAAKC,MAAMD,KAAKE,SAAWH,GAAa,GAC/CF,MAQH,OANAzD,EAAcC,UAAUsB,KAAKgC,GAC7BvD,EAAcN,OAASI,EACrByD,EAAKxD,SAASL,SACdM,EAAcN,QAGTiD,EAAa3C,EAAeyC,EAAcpD,EAAQ,EAAGqD,GAuE9D,SAASV,EAAQhC,EAAeyC,EAAcpD,EAAOuC,GACnD,IAAI+B,EAAa3D,EAAcG,OAAON,OAEtC,GACEyC,EAAQtC,EAAcN,OAAQkC,EAAMC,QAAU,GAC9C8B,GAAc,GACdtE,GAAS,EAST,OANAW,EAAcE,UAAd,kBACKF,EAAcE,YADnB,OAEKF,EAAcG,cAEnBH,EAAcG,OAAS,IAMzB,IAAMoD,EAAOvD,EAAcG,OACxBqD,OAAOI,KAAKC,MAAMD,KAAKE,SAAWH,GAAa,GAC/CF,MAEGM,EAAYpE,EAAAA,EAAAA,QAAAA,MAAAA,IAChBA,EAAAA,EAAAA,QAAAA,OAAAA,SAA+B,MAE9BmC,YAAYyB,EAAKxD,SAASL,UAC1BoC,YAAYW,GAiBf,OAdEuB,EAAIC,EAAerC,EAAMC,OAASoC,EAAeF,IAC/CC,EAAIC,EAAerC,EAAMC,OAASoC,EAAexB,KACnDH,EAAQyB,EAAWnC,EAAMG,UAAY,GAErC/B,EAAcC,UAAUsB,KAAKgC,GAC7BvD,EAAcN,OAASI,EACrByD,EAAKxD,SAASL,SACdM,EAAcN,QAEhBL,KAEAW,EAAcE,UAAUqB,KAAKgC,GAGxBvB,EAAQhC,EAAeyC,EAAcpD,EAAOuC,GA6BrD,SAAS9B,EAAWW,EAASyD,GAC3B,OAAOA,EAAgBpC,YAAYrB,GA+DrC,SAASe,EAAe2C,EAAYC,GAClC,YADqD,IAAnBA,IAAAA,EAAY,OACvCD,EAAWlB,MAAK,SAACC,EAAGC,GACzB,IAAIkB,EAAiC5F,EAAT,SAAd2F,GAA+B,EAAY,GACzD,OAAOhB,QAAQa,EAAef,GAAKe,EAAed,IAAMkB,MAS5D,SAASJ,EAAevE,GACtB,IAAI4E,EAAM7F,EAAO,GACb8F,EAAW9F,EAAOiB,EAAO+B,OAAO+C,UAEpC,GAAID,EAAW,EACbD,EAAMC,OACD,GAAI7E,EAAOiB,cAAgBjB,EAAOiB,aAAalB,MAAQ,EAAG,CAC/D,IAAIqB,EAAapB,EAAOiB,aAAaE,OAAOP,IAAI,GAC5CW,EAAYvB,EAAOiB,aAAaL,IAAIQ,GAAYD,OAAOP,IAAI,GAC/DgE,EAAM7F,EAAOiB,EAAOiB,aAAaL,IAAIQ,GAAYR,IAAIW,GAAWuD,UAGlE,OAAOF,EAST,SAASjB,EAAkBoB,EAAQC,GACjC,IAAIJ,EAAM7F,EAAO,GAGjB,GAFeA,EAAOgG,EAAOhD,OAAO+C,UAErB,EACbF,EAAM7F,EAAOiG,EAASjD,OAAO+C,eACxB,GACLC,EAAO9D,cACP+D,EAAS/D,cACT8D,EAAO9D,aAAalB,MAAQ,GAC5BiF,EAAS/D,aAAalB,MAAQ,EAC9B,CACA,IAAIqB,EAAa2D,EAAO9D,aAAaE,OAAOP,IAAI,GAC5CW,EAAYwD,EAAO9D,aAAaL,IAAIQ,GAAYD,OAAOP,IAAI,GAC/DgE,EAAM7F,EAAOiG,EAAS/D,aAAaL,IAAIQ,GAAYR,IAAIW,GAAWuD,UAGpE,OAAOF,EAQT,SAAS5C,EAAa1B,EAAeD,GACnC,GAAItB,EAAOsB,EAAO0B,OAAO+C,UAAY/F,EAAO,GAAI,CAG9C,IAFA,IAAI0B,EAAS,GACTD,EAAY,GACPN,EAAI,EAAGA,EAAII,EAAcE,UAAUL,OAAQD,SAGhD+E,IADArC,EAAQtC,EAAcE,UAAUN,GAAGG,SAASL,SAAUK,GAGtDI,EAAOoB,KAAKvB,EAAcE,UAAUN,IAEpCM,EAAUqB,KAAKvB,EAAcE,UAAUN,IAG3CI,EAAcG,OAASA,EACvBH,EAAcE,UAAYA,OAE1BF,EAAcG,OAASH,EAAcE,UAAUsD,OAC7C,EACAxD,EAAcE,UAAUL,QAa9B,SAASyD,EACPb,EACAmC,EACAlC,EACAiB,GAEA,IAAIjE,EAAS+C,EAEb,GAAIC,GAAgBjE,EAAOgE,EAAahB,OAAO+C,UAAY,EAAG,CAC5D,IAAIrC,EAAYxC,EAAAA,EAAAA,QAAAA,MAAAA,IACdA,EAAAA,EAAAA,QAAAA,iBACEiF,EACAjF,EAAAA,EAAAA,QAAAA,OAAAA,SAA+B+C,EAAaL,cAKhD,GAAIC,EAAQsC,EAAiBzC,GAAa,EAAG,OAAO,EAYpD,GATIG,EAAQG,EAAcN,GAAa,IACrCzC,EAASyC,EAAUL,YACjBnC,EAAAA,EAAAA,QAAAA,MAAAA,IACEA,EAAAA,EAAAA,QAAAA,OAAAA,SAA+BhB,EAAmBG,YAMpD6E,EAAa,EAAG,CAClB,IAAIvB,EACF3D,EAAOE,EAAmBI,SACxBN,EAAOE,EAAmBM,WAC5BR,EAAOE,EAAmBK,SAE5BoD,EAASzC,EAAAA,EAAAA,QAAAA,MAAAA,IACPA,EAAAA,EAAAA,QAAAA,OAAAA,SAA+ByC,EAAOC,aAGxC3C,EAASA,EAAOoC,YAAYM,IAIhC,OAAOE,EAAQsC,EAAiBlF,IAAW,EAsB7C,IAAMkD,EAAgB,SAACiC,GAAD,OACpBA,EAASC,KAAI,SAACvB,GAAD,OACX5D,EAAAA,EAAAA,QAAAA,yBAAAA,WAAmD4D,EAAKpC,gBAQtD0B,EAAa,SAACkC,GAAD,OAAWpF,EAAAA,EAAAA,QAAAA,MAAAA,WAAgCoF,EAAM5D,aAGpE,SAAS6C,EAAIgB,GACX,OAAOA,EAAM,EAAIA,EAAMvG,GAAQ,GAAKuG,EAStC,SAAS1C,EAAQ2C,EAAOC,GACtB,IAAIC,EAAO1G,EAAOwG,EAAMxD,OAAO+C,UAC3BY,EAAO3G,EAAOyG,EAAUzD,OAAO+C,UAEnC,GAAIU,EAAUvE,aAAc,CAC1B,IAAI0E,EAAcH,EAAUvE,aAAaE,OAAOP,IAAI,GAChDgF,EAAaJ,EAAUvE,aAAaL,IAAI+E,GAAaxE,OAAOP,IAAI,GAEpE,IAAI2E,EAAMtE,eAAgBsE,EAAMtE,aAAalB,MAe3C,OAdA,IACEwF,EAAMtE,aAAaL,IAAI+E,KACvBJ,EAAMtE,aAAaL,IAAI+E,GAAa/E,IAAIgF,GASxC,OAPAH,EAAO1G,EACLwG,EAAMtE,aAAaL,IAAI+E,GAAa/E,IAAIgF,GAAYd,UAEtDY,EAAO3G,EACLyG,EAAUvE,aAAaL,IAAI+E,GAAa/E,IAAIgF,GAAYd,UAUhE,OAAOW,GAAQC,EAAQD,IAASC,EAAO,EAAI,GAAM,EAGnD,QC3yBMG,EAAW,WACf,IAAMC,EAAU7F,EAAAA,EAAAA,QAAAA,cAAAA,MAEhB,OADA6F,EAAQC,IAAI9F,EAAAA,EAAAA,QAAAA,aAAAA,KAAgC+F,EAAAA,EAAAA,ICxB5C,siQDyBOF,GAGHG,EAAmB,kBACvBhG,EAAAA,EAAAA,QAAAA,QAAAA,YAEE,oEAIEiG,EAAQ,SAAC,GAAmD,IAAjDC,EAAgD,EAAhDA,WAAYC,EAAoC,EAApCA,gBAAiBC,EAAmB,EAAnBA,aAkBtCC,EAAcrG,EAAAA,EAAAA,QAAAA,WAAAA,MACpBqG,EAAYP,IAAI9F,EAAAA,EAAAA,QAAAA,WAAAA,WAAoC+F,EAAAA,EAAAA,IAAQG,KAC5DG,EAAYP,IAAI9F,EAAAA,EAAAA,QAAAA,WAAAA,UAAoCmG,IACpDE,EAAYP,IAAI9F,EAAAA,EAAAA,QAAAA,WAAAA,WAAoC+F,EAAAA,EAAAA,IAAQK,KAC5D,IAAME,EAAetG,EAAAA,EAAAA,QAAAA,WAAAA,MAerB,OAdAsG,EAAaR,IACX9F,EAAAA,EAAAA,QAAAA,WAAAA,uBACEA,EAAAA,EAAAA,QAAAA,iBAAAA,IACEA,EAAAA,EAAAA,QAAAA,IAAAA,QAA2B,GAC3BqG,KAIQrG,EAAAA,EAAAA,QAAAA,WAAAA,uBACZA,EAAAA,EAAAA,QAAAA,iBAAAA,IACEA,EAAAA,EAAAA,QAAAA,IAAAA,QAA2BuG,EAAWC,OACtCF,KAMAC,EAAa,CACjBC,MAAO,GAaHC,EAAM,SAACC,GACX,IAAMC,EAAe3G,EAAAA,EAAAA,QAAAA,WAAAA,uBACnBA,EAAAA,EAAAA,QAAAA,iBAAAA,IACEA,EAAAA,EAAAA,QAAAA,IAAAA,QAA2B,GAC3BA,EAAAA,EAAAA,QAAAA,WAAAA,QAaJ,OAViBA,EAAAA,EAAAA,QAAAA,SAAAA,IACfA,EAAAA,EAAAA,QAAAA,YAAAA,YACAA,EAAAA,EAAAA,QAAAA,OAAAA,SAA+B0G,GAC/BC,EACA3G,EAAAA,EAAAA,QAAAA,QAAAA,IACEA,EAAAA,EAAAA,QAAAA,OAAAA,SAA+B,UAC/BA,EAAAA,EAAAA,QAAAA,OAAAA,SAA+B,gBAO/B4G,EAAS,SAACF,GACd,IAAMC,EAAe3G,EAAAA,EAAAA,QAAAA,WAAAA,uBACnBA,EAAAA,EAAAA,QAAAA,iBAAAA,IACEA,EAAAA,EAAAA,QAAAA,IAAAA,QAA2B,GAC3BA,EAAAA,EAAAA,QAAAA,WAAAA,QAaJ,OAViBA,EAAAA,EAAAA,QAAAA,SAAAA,IACfA,EAAAA,EAAAA,QAAAA,YAAAA,YACAA,EAAAA,EAAAA,QAAAA,OAAAA,SAA+B0G,GAC/BC,EACA3G,EAAAA,EAAAA,QAAAA,QAAAA,IACEA,EAAAA,EAAAA,QAAAA,OAAAA,SAA+B,UAC/BA,EAAAA,EAAAA,QAAAA,OAAAA,SAA+B,gBAS/B6G,EAAAA,WACJ,cAAkC,IAApBC,EAAmB,EAAnBA,KAAMC,EAAa,EAAbA,UAClBC,KAAKC,SAAW,CAAEH,KAAAA,EAAMC,UAAAA,GAevB,IAAL,cAsfE,OAtfF,EACQG,kBAAAA,WAAAA,IAAAA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAN,WAAwBC,EAAUC,EAASC,GAA3C,iFACeC,MAAMN,KAAKC,SAASH,KAAOK,EAAU,CAChDC,QAAQ,OAAD,QACLG,WAAYP,KAAKC,SAASF,WACvBK,EAFE,CAGL,aAAc,mBAEhBI,OAAQH,EAAO,OAAS,MACxBA,KAAAA,IACCI,MAAK,SAACC,GAAD,OAASA,EAAIC,UATvB,+IAAMT,GAeR,EACQU,QAAAA,WAAAA,IAAAA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAN,WAAcC,GAAd,uFACsBb,KAAKE,kBAAL,cACJlB,IAAmB8B,YADf,UADtB,cACQC,EADR,QAKQC,OAAN,mCAAa,WAAOpE,GAAP,oEAEsB,IADhBqE,EAAAA,EAAAA,GAAcrE,EAAK7D,QACrB4C,QAAQkF,GAFZ,0CAGF,GAHE,iCAKF,GALE,2CAAb,uDASAK,QAAQC,IAAIC,KAAKC,UAAUN,IAd7B,SAgBeO,QAAQC,IACnBR,EAAM5C,IAAN,mCAAU,WAAOvB,GAAP,0FACD,CACLiE,MAAAA,EACAjE,KAAM5D,EAAAA,EAAAA,QAAAA,yBAAAA,IACJA,EAAAA,EAAAA,QAAAA,iBAAAA,IACEA,EAAAA,EAAAA,QAAAA,gBAAAA,YAA0C+F,EAAAA,EAAAA,IAAQnC,EAAK4E,UACvD5E,EAAK6E,cAEPzI,EAAAA,EAAAA,QAAAA,kBAAAA,IACEgG,KACAiC,EAAAA,EAAAA,GAAcrE,EAAK7D,YAVjB,2CAAV,wDAjBJ,2IAAM6H,GAqCR,EACQc,OAAAA,WAAAA,IAAAA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAN,mGACQC,EAAY3I,EAAAA,EAAAA,QAAAA,mBAAAA,IAChBA,EAAAA,EAAAA,QAAAA,UAAAA,IACEA,EAAAA,EAAAA,QAAAA,OAAAA,SACEgH,KAAKhI,mBAAmB4J,UAAUxJ,SAEpCY,EAAAA,EAAAA,QAAAA,OAAAA,SACEgH,KAAKhI,mBAAmB4J,UAAUvJ,UAGtCW,EAAAA,EAAAA,QAAAA,OAAAA,SAA+BgH,KAAKhI,mBAAmB6J,SACvD7I,EAAAA,EAAAA,QAAAA,OAAAA,SAA+BgH,KAAKhI,mBAAmB8J,aACvD9I,EAAAA,EAAAA,QAAAA,OAAAA,SAA+BgH,KAAKhI,mBAAmB+J,YACvD/B,KAAKhI,mBAAmBgK,WACxBhC,KAAKhI,mBAAmBM,UACxB0H,KAAKhI,mBAAmBiK,SACxBjC,KAAKhI,mBAAmBkK,UACxBlJ,EAAAA,EAAAA,QAAAA,cAAAA,IAAiCmJ,OAAOC,KE7N5C,y7BF6NgE,SAExDC,EAASrJ,EAAAA,EAAAA,QAAAA,WAAAA,OAnBjB,MAxLoB,KA4MkB,GAA9BsJ,EApBR,EAqBQ7J,EAAUO,EAAAA,EAAAA,QAAAA,mBAAAA,MArBlB,kBAsBS,CAAE2I,UAAAA,EAAWU,OAAAA,EAAQC,SAAAA,EAAU7J,QAAAA,IAtBxC,kGAAMiJ,GA6CR,EACEa,aAAA,SACEC,EACApE,EAFF,GAIG,IAAD,aADyC,GACzC,EADEqE,EACF,EADEA,MAAOC,EACT,EADSA,kBAAmBJ,EAC5B,EAD4BA,SAEtB1G,EAAS5C,EAAAA,EAAAA,QAAAA,iBACboF,EACApF,EAAAA,EAAAA,QAAAA,OAAAA,SAA+BgH,KAAKhI,mBAAmB6J,SACvDY,GAASzJ,EAAAA,EAAAA,QAAAA,iBAAgCyJ,IAGP,GAAhC7G,EAAOD,QAAQyC,EAAMtD,SAAcsD,EAAMuE,SAAS/G,GACtD,IAAMxC,EAASJ,EAAAA,EAAAA,QAAAA,kBAAAA,IAAqCwJ,EAASpE,GAU7D,OARIqE,GACFrJ,EAAOwJ,cAAc5J,EAAAA,EAAAA,QAAAA,iBAAgCyJ,IAGnDC,IACFJ,EAzPgB,KAyPQE,QAAU,MAAOK,EAAAA,EAAAA,IAAMH,EAAkBI,aAAatI,aAGzEpB,GAKX,EACE2J,cAAA,SAAcpB,EAAWZ,GACvB,IAAMvI,EAASQ,EAAAA,EAAAA,QAAAA,kBAAAA,MACf+H,EAAMiC,SAAQ,SAACpG,GACbpE,EAAOsG,IAAIlC,EAAKf,YAElB8F,EAAUsB,eAAezK,IAK7B,EACQ0K,WAAAA,WAAAA,IAAAA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAN,oJAyBE,IAxBAvB,EADF,EACEA,UACAwB,EAFF,EAEEA,cACApC,EAHF,EAGEA,MACAtI,EAJF,EAIEA,QACA4J,EALF,EAKEA,OACAC,EANF,EAMEA,SACAc,EAPF,EAOEA,WACAC,EARF,EAQEA,OAEAnC,QAAQC,IAAI1I,GACN6K,EAAwBtK,EAAAA,EAAAA,QAAAA,sBAAAA,MAXhC,EAY0Bf,EAAAA,cACtB8I,EACAtI,EACA,EACA2K,EAAa,CAACA,GAAc,IAJxBvH,EAZR,EAYQA,MAAOP,EAZf,EAYeA,OAMbO,EAAMmH,SAAQ,SAACpG,GACb+E,EAAU4B,UACR3G,EAAKxD,SAASoJ,UACd5F,EAAKf,QACLe,EAAKxD,SAASL,aAGTE,EAAI,EAAGA,EAAIR,EAAQK,MAAOG,IACjC0I,EAAU6B,WAAW/K,EAAQkB,IAAIV,IA1BrC,IA4BMmK,EA5BN,wBA6BUK,EAAYzK,EAAAA,EAAAA,QAAAA,UAAAA,MACZ0K,EAAgB/B,EACnBgC,eAAeP,EAAWvH,SAC1BH,WACH+H,EAAU3E,IAAIuE,EAAOK,IACrB/B,EAAUiC,cACR5K,EAAAA,EAAAA,QAAAA,UAAAA,WAAoCyK,EAAUjJ,aAEhDmH,EAAUkC,gBACR7K,EAAAA,EAAAA,QAAAA,WAAAA,WAAqCqJ,EAAO7H,aAE9CmH,EAAUmC,mBAAmBlF,KAxCjC,UAyC8B7G,OAAOgM,QAAQC,gBAzC7C,cAyCUC,EAzCV,OAyC8D9F,KAAI,SAACvB,GAAD,OAC5D5D,EAAAA,EAAAA,QAAAA,yBAAAA,YAAmD+F,EAAAA,EAAAA,IAAQnC,QAE9C1D,QAAU,GA5C7B,uBA4CsC,IAAIN,MAAM,iBA5ChD,QA6CIoH,KAAK+C,cAAcpB,EAAWsC,GAE9BX,EAAsBQ,mBAAmBlF,KACzC0E,EAAsBO,gBAAgBxB,GACtCiB,EAAsBM,cAAcH,GAjDxC,WAoDMnB,IACF4B,EAAWlL,EAAAA,EAAAA,QAAAA,cAAAA,MACLmL,EAAkBnL,EAAAA,EAAAA,QAAAA,2BAAAA,MACxBoL,OAAOlK,KAAKoI,GAAUU,SAAQ,SAACqB,GAC7BD,OAAOlK,KAAKoI,EAAS+B,IAAQnL,OAAS,GACpCiL,EAAgB5J,OACdvB,EAAAA,EAAAA,QAAAA,OAAAA,SAA+BqL,GAC/BrL,EAAAA,EAAAA,QAAAA,6BACEoI,KAAKC,UAAUiB,EAAS+B,IACxB,OAIRH,EAASI,aAAaH,GACtBxC,EAAU4C,mBAAmBL,KAGzBM,EAAoBlJ,EAAOtB,eAKJ,EAA3BsB,EAAOd,WAAWtB,OAAa8G,KAAKhI,mBAAmBgK,aAEjDyC,EAAgBzL,EAAAA,EAAAA,QAAAA,MAAAA,IACpBA,EAAAA,EAAAA,QAAAA,OAAAA,SAA+B,MAG3B0L,EAAqB1L,EAAAA,EAAAA,QAAAA,WAAAA,MACrB2L,EAAWH,EAAkBtK,OACjB,WAChB,IAAK,IAAIE,EAAI,EAAGA,EAAIoK,EAAkB1L,MAAOsB,IAAK,CAKhD,IAJA,IAAMwK,EAASD,EAAShL,IAAIS,GACtByK,EAAeL,EAAkB7K,IAAIiL,GACrCE,EAAaD,EAAa3K,OAC1B6K,EAAS/L,EAAAA,EAAAA,QAAAA,OAAAA,MACNgM,EAAI,EAAGA,EAAIF,EAAWhM,MAAOkM,IAAK,CACzC,IAAMC,EAAcH,EAAWnL,IAAIqL,GAC7BE,EAAWL,EAAalL,IAAIsL,GAClCF,EAAOxK,OAAO0K,EAAaC,GAE3B,IAAMC,EAAmBnM,EAAAA,EAAAA,QAAAA,WAAAA,WACvB0L,EAAmBlK,YAErB2K,EAAiB5K,OAAOqK,EAAQG,GAChC,IAAMK,EAAapM,EAAAA,EAAAA,QAAAA,MAAAA,IACjBA,EAAAA,EAAAA,QAAAA,OAAAA,SAA+B,MAGjC,GADAoM,EAAWzK,eAAewK,GAEO,EAA/BC,EAAW5K,WAAWtB,QACtB,EAAKlB,mBAAmBgK,WAGxB,YADA0C,EAAmBnK,OAAOqK,EAAQG,GAItCL,EAAmBnK,OAAOqK,EAAQG,IAGtCM,GACAZ,EAAc9J,eAAe+J,GACvB9I,EAAS5C,EAAAA,EAAAA,QAAAA,iBACbyL,EACAzL,EAAAA,EAAAA,QAAAA,OAAAA,SAA+BgH,KAAKhI,mBAAmB6J,UAEzD4C,EAAc9B,SAAS/G,GAEvB+F,EAAU6B,WACRxK,EAAAA,EAAAA,QAAAA,kBAAAA,IACEmK,EAAcL,aACd2B,KAKN9C,EAAU2D,qBAAqBnC,EAAcL,cACvCyC,EAAS5D,EAAU6D,QACnBC,EAAKzM,EAAAA,EAAAA,QAAAA,YAAAA,IACTuM,EACAvM,EAAAA,EAAAA,QAAAA,sBAAAA,WACEsK,EAAsB9I,YAExB0J,GAEIwB,EAA8B,EAAvBD,EAAGjL,WAAWtB,OAC3BgI,QAAQC,IAAIuE,KACRA,EAAO1F,KAAKhI,mBAAmBM,WA3IrC,uBA4IU,IAAIM,MAAM,oBA5IpB,yBA6I8Bb,OAAOgM,QAAQ4B,QACzC9C,EAAAA,EAAAA,IAAM4C,EAAGjL,aACT,GA/IJ,eA6IMoL,EA7IN,OAiJEA,EAAkB5M,EAAAA,EAAAA,QAAAA,sBAAAA,YAChB+F,EAAAA,EAAAA,IAAQ6G,IAEVtC,EAAsBuC,UAAUD,EAAgBE,SAC1CC,EAAW/M,EAAAA,EAAAA,QAAAA,YAAAA,IACfyM,EAAGpF,OACHiD,EACAmC,EAAGO,kBAGL9E,QAAQC,IAAI,eAAgB4E,EAASvL,WAAWtB,QA3JlD,UA6JuBnB,OAAOgM,QAAQkC,UAASpD,EAAAA,EAAAA,IAAMkD,EAASvL,aA7J9D,eA6JQ0L,EA7JR,yBA8JSA,GA9JT,oGAAMhD,GAAN,EAiKMiD,KAAAA,WAAAA,IAAAA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAN,oGACQnN,EAAAA,EAAAA,OADR,uBAEkBgH,KAAKE,kBAAL,6BAFlB,OAEQkG,EAFR,OAGEpG,KAAKhI,mBAAqB,CACxB4J,UAAW,CACTxJ,QAASgO,EAAEC,UAAU3K,WACrBrD,QAAS+N,EAAEE,UAAU5K,YAEvBmG,QAAS,UACTC,YAAa,YACbC,WAAY,UACZC,WAAY,OACZ1J,UAAW,MACX2J,SAAU,MACVC,UAAW,QAGblC,KAAKuG,aAAe,CAClBC,OAAQ,CACNhE,QAASxJ,EAAAA,EAAAA,QAAAA,QAAAA,YAEP,mEAEFyN,KAAMzN,EAAAA,EAAAA,QAAAA,OAAAA,SAA+B,QACrC0N,KAAM1N,EAAAA,EAAAA,QAAAA,OAAAA,SAA+B,SAEvC2N,OAAQ,CACNnE,QAASxJ,EAAAA,EAAAA,QAAAA,QAAAA,YAEP,mEAEF4N,IAAK5N,EAAAA,EAAAA,QAAAA,OAAAA,SAA+B,WAIxCf,EAAAA,sBACE+H,KAAKhI,mBAAmB6J,QACxB7B,KAAKhI,mBAAmB4J,UAAUxJ,QAClC4H,KAAKhI,mBAAmB4J,UAAUvJ,QAClC2H,KAAKhI,mBAAmBM,UAAUoD,YAvCtC,kGAAMyK,G,EA4CAtF,MAAAA,WAAAA,IAAAA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAN,WAAYA,EAAO1B,EAAiBC,GAApC,uGACyDY,KAAK0B,SAD9D,uBACUC,EADV,EACUA,UAAWU,EADrB,EACqBA,OAAQC,EAD7B,EAC6BA,SAAU7J,EADvC,EACuCA,QADvC,KAEwBO,EAAAA,EAAAA,QAAAA,YAFxB,KAGIA,EAAAA,EAAAA,QAAAA,QAHJ,KAIM+F,EAAAA,GAJN,UAIqBhH,OAAOgM,QAAQ8C,mBAJpC,2BAIwD,GAJxD,8BAG2BC,WAH3B,gBAEQC,EAFR,KAEmDC,aAFnD,0BAQuBjP,OAAOgM,QAAQkD,WARtC,eAQQlG,EARR,OAQkD5C,KAAI,SAACvB,GAAD,OAClD5D,EAAAA,EAAAA,QAAAA,yBAAAA,YAAmD+F,EAAAA,EAAAA,IAAQnC,OAGvDsK,EAAajI,EAAM,CACvBC,YAAY2D,EAAAA,EAAAA,IAAMkE,EAAcI,eAAeC,aAAa5M,YAC5D2E,gBAAiBA,EACjBC,aAA8B,IAAhBA,GAAqByD,EAAAA,EAAAA,IAAMkE,EAAcI,eAAeC,aAAa5M,YAAc4E,IAGnG3G,EAAQqG,IACNkB,KAAKuC,aACHvD,IACA6B,EACA,CACE4B,MAAOyE,EACPxH,MAAO,EACPgD,kBAAmBqE,EACnBzE,SAAAA,KAIND,EAAOvD,IAAIoI,GA9Bb,UAgCuBlH,KAAKkD,WAAW,CACnCvB,UAAAA,EACAwB,cAAe4D,EACfhG,MAAAA,EACAtI,QAAAA,EACA4J,OAAAA,EACAC,SAAAA,IAtCJ,eAgCQ4D,EAhCR,yBAwCSA,GAxCT,wGAAMrF,GAAN,EA2CMwG,SAAAA,WAAAA,IAAAA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAN,WAAexG,GAAf,uFAC0Bb,KAAKY,QAAQC,GADvC,UAE2B,KADnByG,EADR,QAEgBpO,OAFhB,yCAGWoO,EAAU,IAHrB,UAK2B,IAArBA,EAAUpO,OALhB,yCAMW,MANX,cAQEgI,QAAQC,IAAI,4DARd,kBASSmG,EAAU,IATnB,mGAAMD,GAAN,EAYME,SAAAA,WAAAA,IAAAA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAN,WAAe7E,EAAmB7B,EAAO1B,GAAzC,+GACyDa,KAAK0B,SAD9D,uBACUC,EADV,EACUA,UAAWU,EADrB,EACqBA,OADrB,EAC6BC,SAAU7J,EADvC,EACuCA,QAE/B+O,EAAqBxO,EAAAA,EAAAA,QAAAA,YAAAA,aACzBA,EAAAA,EAAAA,QAAAA,QAAAA,YACE0J,IALN,KAUwB1J,EAAAA,EAAAA,QAAAA,YAVxB,KAWIA,EAAAA,EAAAA,QAAAA,QAXJ,KAYM+F,EAAAA,GAZN,UAYqBhH,OAAOgM,QAAQ8C,mBAZpC,2BAYwD,GAZxD,8BAW2BC,WAX3B,gBAUQC,EAVR,KAUmDC,aAVnD,0BAiBuBjP,OAAOgM,QAAQkD,WAjBtC,eAiBQlG,EAjBR,OAiBkD5C,KAAI,SAACvB,GAAD,OAClD5D,EAAAA,EAAAA,QAAAA,yBAAAA,YAAmD+F,EAAAA,EAAAA,IAAQnC,OAE7DsE,QAAQC,IAAIC,KAAKC,UAAUN,IApB7B,UAsB0Bf,KAAKqH,SAASxG,GAtBxC,WAuBmB,OADXyG,EAtBR,8BAwBU,iBAxBV,eA2BQJ,EAAajI,EAAM,CACvBC,YAAY2D,EAAAA,EAAAA,IAAM2E,EAAmBL,eAAeC,aAAa5M,YACjE2E,gBAAiBA,EACjBC,cAAcyD,EAAAA,EAAAA,IAAM2E,EAAmBL,eAAeC,aAAa5M,cAErE6H,EAAOvD,IAAIoI,GAELO,EAAWzO,EAAAA,EAAAA,QAAAA,WAAAA,UAAoC,IAE/CoF,EAAQkJ,EAAU1K,KAAKxD,SAASL,SAEtCN,EAAQqG,IACNkB,KAAKuC,aACHwE,EAAcjE,aACd1E,EACA,CAACsB,MAAM,KAGXwB,QAAQC,IAAI,qBAAsBuG,EAAAA,EAAAA,IAAcvI,IAChD1G,EAAQqG,IACNkB,KAAKuC,aACHiF,EAAmB1E,aAUnB3D,EACA,CAACO,MAAM,KAGXjH,EAAQqG,IACNkB,KAAKuC,aACHvC,KAAKuG,aAAaC,OAAOhE,SACzBvB,EAAAA,EAAAA,GAAc,CAAC,CAAC0G,KAAM,WAAYzC,SAAU,aAC5C,CACEzC,MAAOgF,EACP/H,MAAO,KAIb2C,EAAOvD,IAAI2I,GAEXhP,EAAQqG,IACNkB,KAAKuC,aACHvC,KAAKuG,aAAaI,OAAOnE,SACzBvB,EAAAA,EAAAA,GAAc,CAAC,CAAC0G,KAAM,WAAYzC,SAAU,aAC5C,CACEzC,MAAOgF,EACP/H,MAAO,KAIb2C,EAAOvD,IAAI2I,IAELG,EAAkB5O,EAAAA,EAAAA,QAAAA,iBAAAA,OACR8F,IAAIiI,EAAcI,eAAeC,cACjDzF,EAAUkG,qBAAqBD,GAxFjC,UA0FuB5H,KAAKkD,WAAW,CACnCvB,UAAAA,EACAwB,cAAe4D,EACfhG,MAAAA,EACAtI,QAAAA,EACA4J,OAAAA,EACAe,WAAYkE,EAAU1K,KACtByG,OAAQ5D,IAjGZ,eA0FQyG,EA1FR,yBAmGSA,GAnGT,wGAAMqB,GAAN,EAsGMO,YAAAA,WAAAA,IAAAA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAN,WAAkBpF,EAAmB7B,EAAO1B,GAA5C,2GAC+Ca,KAAK0B,SADpD,uBACUC,EADV,EACUA,UAAWU,EADrB,EACqBA,OAAQ5J,EAD7B,EAC6BA,QAD7B,KAGwBO,EAAAA,EAAAA,QAAAA,YAHxB,KAIIA,EAAAA,EAAAA,QAAAA,QAJJ,KAKM+F,EAAAA,GALN,UAKqBhH,OAAOgM,QAAQ8C,mBALpC,2BAKwD,GALxD,8BAI2BC,WAJ3B,gBAGQC,EAHR,KAGmDC,aAHnD,0BASuBjP,OAAOgM,QAAQkD,WATtC,eASQlG,EATR,OASkD5C,KAAI,SAACvB,GAAD,OAClD5D,EAAAA,EAAAA,QAAAA,yBAAAA,YAAmD+F,EAAAA,EAAAA,IAAQnC,OAGvD0K,EAAYtH,KAAKqH,SAASxG,GAE1BqG,EAAajI,EAAM,CACvBC,YAAY2D,EAAAA,EAAAA,IAAMH,EAAkByE,eAAeC,aAAa5M,YAChE2E,gBAAiBA,EACjBC,cAAcyD,EAAAA,EAAAA,IAAMH,EAAkByE,eAAeC,aAAa5M,cAEpE6H,EAAOvD,IAAIoI,GAEL9I,EAAQkJ,EAAU1K,KAAKxD,SAASL,SAEtCN,EAAQqG,IAAIkB,KAAKuC,aAAawE,EAAcjE,aAAc1E,KAEpDwJ,EAAkB5O,EAAAA,EAAAA,QAAAA,iBAAAA,OACR8F,IAAIiI,EAAcI,eAAeC,cACjDzF,EAAUkG,qBAAqBD,GA5BjC,UA8BuB5H,KAAKkD,WAAW,CACnCvB,UAAAA,EACAwB,cAAe4D,EACfhG,MAAAA,EACAtI,QAAAA,EACA4J,OAAAA,EACAe,WAAYkE,EAAU1K,KACtByG,OAAQzD,IArCZ,eA8BQsG,EA9BR,yBAuCSA,GAvCT,wGAAM4B,GAAN,EAvgBIjI,GAmjBN,K,gEGxrBM7G,EAAAA,WAAAA,SAAAA,KAaH,OAbGA,EAAAA,UACEmN,KAAAA,WAAAA,IAAAA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAN,kFACMnG,KAAK+H,MADX,iEAKqB,sDALrB,OAKE/H,KAAK+H,MALP,yGAAM5B,IAAN,6BAUA,WACE,OAAOnG,KAAK+H,UACb,EAbG/O,GAgBN,QAAmBA,G,uLCTN+F,EAAU,SAACiJ,GAAD,OAAS7F,EAAAA,GAAAA,KAAY6F,EAAK,QACpCnF,EAAQ,SAACoF,GAAD,OAAW9F,EAAAA,GAAAA,KAAY8F,GAAOvM,SAAS,QAO/CwM,EAAY,SAACF,GAAD,OAAS7F,EAAAA,GAAAA,KAAY6F,GAAKtM,SAAS,QAE/CuF,EAAgB,SAAC8D,GAC5B,IAAMoD,EAAanP,EAAAA,EAAAA,QAAAA,WAAAA,MACb4E,EAAWmH,EAAOqD,MAAK,SAACC,GAAD,MAA0B,aAAfA,EAAMV,SAChC,OACT,IAAIW,IACLvD,EACG/D,QAAO,SAACqH,GAAD,MAA0B,aAAfA,EAAMV,QACxBxJ,KAAI,SAACkK,GAAD,OAAWA,EAAMV,KAAKY,MAAM,EAAG,SAGjCvF,SAAQ,SAAC4B,GAChB,IAAMC,EAAeE,EAAO/D,QAC1B,SAACqH,GAAD,OAAWA,EAAMV,KAAKY,MAAM,EAAG,MAAQ3D,KAEnC4D,EAAcxP,EAAAA,EAAAA,QAAAA,OAAAA,MACpB6L,EAAa7B,SAAQ,SAACqF,GACpBG,EAAYjO,OACVvB,EAAAA,EAAAA,QAAAA,UAAAA,IAA6BmJ,EAAAA,GAAAA,KAAYkG,EAAMV,KAAKY,MAAM,IAAK,QAC/DvP,EAAAA,EAAAA,QAAAA,OAAAA,SAA+BqP,EAAMnD,cAGzCiD,EAAW5N,OACTvB,EAAAA,EAAAA,QAAAA,WAAAA,WAAqCmJ,EAAAA,GAAAA,KAAYyC,EAAQ,QACzD4D,MAGJ,IAAMpK,EAAQpF,EAAAA,EAAAA,QAAAA,MAAAA,IACZA,EAAAA,EAAAA,QAAAA,OAAAA,SAA+B4E,EAAWA,EAASsH,SAAW,MAGhE,OADIH,EAAO7L,OAAS,IAAM0E,IAAUQ,EAAMzD,eAAewN,GAClD/J,GAmDIsJ,EAAgB,SAACtJ,GAC5B,IAAM2G,EAAS,GAEf,GADAA,EAAOnK,KAAK,CAAE+M,KAAM,WAAYzC,SAAU9G,EAAMtD,OAAO+C,WACnDO,EAAMpE,aAER,IADA,IAAMyO,EAAcrK,EAAMpE,aAAaE,OAC9BE,EAAI,EAAGA,EAAIqO,EAAY3P,MAAOsB,IAIrC,IAHA,IAAMwK,EAAS6D,EAAY9O,IAAIS,GACzByK,EAAezG,EAAMpE,aAAaL,IAAIiL,GACtCE,EAAaD,EAAa3K,OACvB8K,EAAI,EAAGA,EAAIF,EAAWhM,MAAOkM,IAAK,CACzC,IAAMC,EAAcH,EAAWnL,IAAIqL,GAC7BE,EAAWL,EAAalL,IAAIsL,GAC5BoD,EACJlG,EAAAA,GAAAA,KAAYyC,EAAOpK,WAAY,OAAOkB,SAAS,OAC/CyG,EAAAA,GAAAA,KAAY8C,EAAYyD,OAAQ,OAAOhN,SAAS,OAClDqJ,EAAOnK,KAAK,CACV+M,KAAMU,EACNnD,SAAUA,EAASrH,WAK3B,OAAOkH","sources":["webpack://yoctodao-interface/./secrets.js","webpack://yoctodao-interface/./src/cardano/market/coinSelection.js","webpack://yoctodao-interface/./src/cardano/market/index.js","webpack://yoctodao-interface/./src/cardano/market/plutus.js","webpack://yoctodao-interface/./src/cardano/market/languageViews.js","webpack://yoctodao-interface/./src/cardano/market/loader.js","webpack://yoctodao-interface/./src/cardano/market/utils.js"],"sourcesContent":["// const PROJECT_ID=\"mainnetsm9KvzwMM6S35W9yLyc1f8sn9hzHuAnQ\"\nconst PROJECT_ID=\"testnetL0riA5tMipy3cQ45FjldsEdTSTuClr8V\"\n\nlet secrets = {\n    PROJECT_ID: PROJECT_ID\n}\n\nexport default secrets;","import {\n  TransactionUnspentOutput,\n  TransactionOutputs,\n  Value,\n} from \"./custom_modules/@emurgo/cardano-serialization-lib-browser/cardano_serialization_lib\";\nimport Loader from \"./loader\";\nconst BigInt = typeof window !== \"undefined\" && window.BigInt;\n\n/**\n * BerryPool implementation of the __Random-Improve__ coin selection algorithm.\n *\n * = Overview\n *\n * The __Random-Improve__ coin selection algorithm works in __two phases__, by\n * /first/ selecting UTxO entries /at random/ to pay for each of the given\n * outputs, and /then/ attempting to /improve/ upon each of the selections.\n *\n * === Phase 1: Random Selection\n *\n * __In this phase, the algorithm randomly selects a minimal set of UTxO__\n * __entries to pay for each of the given outputs.__\n *\n * During this phase, the algorithm:\n *\n *   *  processes outputs in /descending order of coin value/.\n *\n *   *  maintains a /remaining UTxO set/, initially equal to the given\n *      /UTxO set/ parameter.\n *\n *   *  based on every output nature, generate a /native token UTxO subset/\n *      to narrow down to useful UTxO\n *\n *   *  maintains an /accumulated coin selection/, which is initially /empty/.\n *\n * For each output of value __/v/__, the algorithm /randomly/ selects entries\n * from the /remaining UTxO set/, until the total value of selected entries is\n * greater than or equal to __/v/__. The selected entries are then associated\n * with that output, and removed from the /remaining UTxO set/.\n *\n * This phase ends when every output has been associated with a selection of\n * UTxO entries.\n *\n * However, if the remaining UTxO set is completely exhausted before all\n * outputs can be processed, the algorithm terminates with an error.\n *\n * === Phase 2: Improvement\n *\n * __In this phase, the algorithm attempts to improve upon each of the UTxO__\n * __selections made in the previous phase, by conservatively expanding the__\n * __selection made for each output.__\n *\n * During this phase, the algorithm:\n *\n *   *  processes outputs in /ascending order of coin value/.\n *\n *   *  continues to maintain the /remaining UTxO set/ produced by the previous\n *      phase.\n *\n *   *  maintains an /accumulated coin selection/, initiated from previous phase.\n *\n * For each output of value __/v/__, the algorithm:\n *\n *  1.  __Calculates a /target range/__ for the total value of inputs used to\n *      pay for that output, defined by the triplet:\n *\n *      (/minimum/, /ideal/, /maximum/) = (/v/, /2v/, /3v/)\n *\n *  2.  __Attempts to /improve/ upon the /existing UTxO selection/__ for that\n *      output, by repeatedly selecting additional entries at random from the\n *      /remaining UTxO set/, stopping when the selection can be improved upon\n *      no further.\n *\n *      A selection with value /v1/ is considered to be an /improvement/ over a\n *      selection with value /v0/ if __all__ of the following conditions are\n *      satisfied:\n *\n *       * __Condition 1__: we have moved closer to the /ideal/ value:\n *\n *             abs (/ideal/ − /v1/) < abs (/ideal/ − /v0/)\n *\n *       * __Condition 2__: we have not exceeded the /maximum/ value:\n *\n *             /v1/ ≤ /maximum/\n *\n *       * __Condition 3__: when counting cumulatively across all outputs\n *       considered so far, we have not selected more than the /maximum/ number\n *       of UTxO entries specified by 'limit'.\n *\n *  3.  __Creates a /change value/__ for the output, equal to the total value\n *      of the /final UTxO selection/ for that output minus the value /v/ of\n *      that output.\n *\n *  4.  __Updates the /accumulated coin selection/__:\n *\n *       * Adds the /output/ to 'outputs'.\n *       * Adds the /improved UTxO selection/ to 'inputs'.\n *       * Adds the /change value/ to 'change'.\n *\n * This phase ends when every output has been processed, __or__ when the\n * /remaining UTxO set/ has been exhausted, whichever occurs sooner.\n *\n * = Termination\n *\n * When both phases are complete, the algorithm terminates.\n *\n * The /accumulated coin selection/ and /remaining UTxO set/ are returned to\n * the caller.\n *\n * === Failure Modes\n *\n * The algorithm terminates with an __error__ if:\n *\n *  1.  The /total value/ of the initial UTxO set (the amount of money\n *      /available/) is /less than/ the total value of the output list (the\n *      amount of money /required/).\n *\n *      See: __'InputsExhaustedError'__.\n *\n *  2.  The /number/ of UTxO entries needed to pay for the requested outputs\n *      would /exceed/ the upper limit specified by 'limit'.\n *\n *      See: __'InputLimitExceededError'__.\n *\n * == Motivating Principles\n *\n * There are several motivating principles behind the design of the algorithm.\n *\n * === Principle 1: Dust Management\n *\n * The probability that random selection will choose dust entries from a UTxO\n * set increases with the proportion of dust in the set.\n *\n * Therefore, for a UTxO set with a large amount of dust, there's a high\n * probability that a random subset will include a large amount of dust.\n *\n * === Principle 2: Change Management\n *\n * Ideally, coin selection algorithms should, over time, create a UTxO set that\n * has /useful/ outputs: outputs that will allow us to process future payments\n * with a minimum number of inputs.\n *\n * If for each payment request of value __/v/__ we create a change output of\n * /roughly/ the same value __/v/__, then we will end up with a distribution of\n * change values that matches the typical value distribution of payment\n * requests.\n *\n * === Principle 3: Performance Management\n *\n * Searching the UTxO set for additional entries to improve our change outputs\n * is /only/ useful if the UTxO set contains entries that are sufficiently\n * small enough. But it is precisely when the UTxO set contains many small\n * entries that it is less likely for a randomly-chosen UTxO entry to push the\n * total above the upper bound.\n */\n\n/**\n * @typedef {Value[]} AmountList - List of 'Value' object\n */\n\n/**\n * @typedef {TransactionUnspentOutput[]} UTxOList - List of UTxO\n */\n\n/**\n * @typedef {Object} UTxOSelection - Coin Selection algorithm core object\n * @property {UTxOList} selection - Accumulated UTxO set.\n * @property {UTxOList} remaining - Remaining UTxO set.\n * @property {UTxOList} subset - Remaining UTxO set.\n * @property {Value} amount - UTxO amount of each requested token\n */\n\n/**\n * @typedef {Object} ImproveRange - ImproveRange\n * @property {Value} ideal - Requested amount * 2\n * @property {Value} maximum - Requested amount * 3\n */\n\n/**\n * @typedef {Object} SelectionResult - Coin Selection algorithm return\n * @property {UTxOList} input - Accumulated UTxO set.\n * @property {OutputList} output - Requested outputs.\n * @property {UTxOList} remaining - Remaining UTxO set.\n * @property {Value} amount - UTxO amount of each requested token\n * @property {Value} change - Accumulated change amount.\n */\n\n/**\n * @typedef {Object} ProtocolParameters\n * @property {int} minUTxO\n * @property {int} minFeeA\n * @property {int} minFeeB\n * @property {int} maxTxSize\n */\n\n/**\n * @type {ProtocolParameters}\n */\nlet protocolParameters = null;\n\n/**\n * CoinSelection Module.\n * @module src/lib/CoinSelection\n */\nconst CoinSelection = {\n  /**\n   * Set protocol parameters required by the algorithm\n   * @param {string} minUTxO\n   * @param {string} minFeeA\n   * @param {string} minFeeB\n   * @param {string} maxTxSize\n   */\n  setProtocolParameters: (minUTxO, minFeeA, minFeeB, maxTxSize) => {\n    protocolParameters = {\n      minUTxO: minUTxO,\n      minFeeA: minFeeA,\n      minFeeB: minFeeB,\n      maxTxSize: maxTxSize,\n    };\n  },\n  /**\n   * Random-Improve coin selection algorithm\n   * @param {UTxOList} inputs - The set of inputs available for selection.\n   * @param {TransactionOutputs} outputs - The set of outputs requested for payment.\n   * @param {int} limit - A limit on the number of inputs that can be selected.\n   * @param {UTxOList} [preset=[]]] - The pre-selection of inputs that will be added.\n   * @return {SelectionResult} - Coin Selection algorithm return\n   */\n  randomImprove: (inputs, outputs, limit, preset = []) => {\n    if (!protocolParameters)\n      throw new Error(\n        \"Protocol parameters not set. Use setProtocolParameters().\"\n      );\n\n    const _minUTxOValue =\n      BigInt(outputs.len()) * BigInt(protocolParameters.minUTxO);\n\n    let amount = Loader.Cardano.Value.new(Loader.Cardano.BigNum.from_str(\"0\"));\n\n    for (let i = 0; i < preset.length; i++) {\n      amount = addAmounts(preset[i].output().amount(), amount);\n    }\n\n    /** @type {UTxOSelection} */\n    let utxoSelection = {\n      selection: [...preset], // Shallow copy\n      remaining: [...inputs], // Shallow copy\n      subset: [],\n      amount: amount,\n    };\n\n    let mergedOutputsAmounts = mergeOutputsAmounts(outputs);\n\n    // Explode amount in an array of unique asset amount for comparison's sake\n    let splitOutputsAmounts = splitAmounts(mergedOutputsAmounts);\n\n    // Phase 1: Select enough input\n    for (let i = 0; i < splitOutputsAmounts.length; i++) {\n      createSubSet(utxoSelection, splitOutputsAmounts[i]); // Narrow down for NatToken UTxO\n\n      utxoSelection = select(\n        utxoSelection,\n        splitOutputsAmounts[i],\n        limit,\n        _minUTxOValue\n      );\n    }\n\n    // Phase 2: Improve\n    splitOutputsAmounts = sortAmountList(splitOutputsAmounts);\n\n    for (let i = 0; i < splitOutputsAmounts.length; i++) {\n      createSubSet(utxoSelection, splitOutputsAmounts[i]); // Narrow down for NatToken UTxO\n\n      let range = {};\n      range.ideal = Loader.Cardano.Value.new(\n        Loader.Cardano.BigNum.from_str(\"0\")\n      )\n        .checked_add(splitOutputsAmounts[i])\n        .checked_add(splitOutputsAmounts[i]);\n      range.maximum = Loader.Cardano.Value.new(\n        Loader.Cardano.BigNum.from_str(\"0\")\n      )\n        .checked_add(range.ideal)\n        .checked_add(splitOutputsAmounts[i]);\n\n      improve(\n        utxoSelection,\n        splitOutputsAmounts[i],\n        limit - utxoSelection.selection.length,\n        range\n      );\n    }\n\n    // Insure change hold enough Ada to cover included native assets and fees\n    if (utxoSelection.remaining.length > 0) {\n      const change = utxoSelection.amount.checked_sub(mergedOutputsAmounts);\n\n      let minAmount = Loader.Cardano.Value.new(\n        Loader.Cardano.min_ada_required(\n          change,\n          Loader.Cardano.BigNum.from_str(protocolParameters.minUTxO)\n        )\n      );\n\n      let maxFee =\n        BigInt(protocolParameters.minFeeA) *\n          BigInt(protocolParameters.maxTxSize) +\n        BigInt(protocolParameters.minFeeB);\n\n      maxFee = Loader.Cardano.Value.new(\n        Loader.Cardano.BigNum.from_str(maxFee.toString())\n      );\n\n      minAmount = minAmount.checked_add(maxFee);\n\n      if (compare(change, minAmount) < 0) {\n        // Not enough, add missing amount and run select one last time\n        const minAda = minAmount\n          .checked_sub(Loader.Cardano.Value.new(change.coin()))\n          .checked_add(Loader.Cardano.Value.new(utxoSelection.amount.coin()));\n\n        createSubSet(utxoSelection, minAda);\n        utxoSelection = select(utxoSelection, minAda, limit, _minUTxOValue);\n      }\n    }\n\n    return {\n      input: utxoSelection.selection,\n      output: outputs,\n      remaining: utxoSelection.remaining,\n      amount: utxoSelection.amount,\n      change: utxoSelection.amount.checked_sub(mergedOutputsAmounts),\n    };\n  },\n};\n\n/**\n * Use randomSelect & descSelect algorithm to select enough UTxO to fulfill requested outputs\n * @param {UTxOSelection} utxoSelection - The set of selected/available inputs.\n * @param {Value} outputAmount - Single compiled output qty requested for payment.\n * @param {int} limit - A limit on the number of inputs that can be selected.\n * @param {int} minUTxOValue - Network protocol 'minUTxOValue' current value.\n * @throws INPUT_LIMIT_EXCEEDED if the number of randomly picked inputs exceed 'limit' parameter.\n * @throws INPUTS_EXHAUSTED if all UTxO doesn't hold enough funds to pay for output.\n * @throws MIN_UTXO_ERROR if lovelace change is under 'minUTxOValue' parameter.\n * @return {UTxOSelection} - Successful random utxo selection.\n */\nfunction select(utxoSelection, outputAmount, limit, minUTxOValue) {\n  try {\n    utxoSelection = randomSelect(\n      cloneUTxOSelection(utxoSelection), // Deep copy in case of fallback needed\n      outputAmount,\n      limit - utxoSelection.selection.length,\n      minUTxOValue\n    );\n  } catch (e) {\n    if (e.message === \"INPUT_LIMIT_EXCEEDED\") {\n      // Limit reached : Fallback on DescOrdAlgo\n      utxoSelection = descSelect(\n        utxoSelection,\n        outputAmount,\n        limit - utxoSelection.selection.length,\n        minUTxOValue\n      );\n    } else {\n      throw e;\n    }\n  }\n\n  return utxoSelection;\n}\n\n/**\n * Randomly select enough UTxO to fulfill requested outputs\n * @param {UTxOSelection} utxoSelection - The set of selected/available inputs.\n * @param {Value} outputAmount - Single compiled output qty requested for payment.\n * @param {int} limit - A limit on the number of inputs that can be selected.\n * @param {int} minUTxOValue - Network protocol 'minUTxOValue' current value.\n * @throws INPUT_LIMIT_EXCEEDED if the number of randomly picked inputs exceed 'limit' parameter.\n * @throws INPUTS_EXHAUSTED if all UTxO doesn't hold enough funds to pay for output.\n * @throws MIN_UTXO_ERROR if lovelace change is under 'minUTxOValue' parameter.\n * @return {UTxOSelection} - Successful random utxo selection.\n */\nfunction randomSelect(utxoSelection, outputAmount, limit, minUTxOValue) {\n  let nbFreeUTxO = utxoSelection.subset.length;\n  // If quantity is met, return subset into remaining list and exit\n  if (\n    isQtyFulfilled(outputAmount, utxoSelection.amount, minUTxOValue, nbFreeUTxO)\n  ) {\n    utxoSelection.remaining = [\n      ...utxoSelection.remaining,\n      ...utxoSelection.subset,\n    ];\n    utxoSelection.subset = [];\n    return utxoSelection;\n  }\n\n  if (limit <= 0) {\n    throw new Error(\"INPUT_LIMIT_EXCEEDED\");\n  }\n\n  if (nbFreeUTxO <= 0) {\n    if (isQtyFulfilled(outputAmount, utxoSelection.amount, 0, 0)) {\n      throw new Error(\"MIN_UTXO_ERROR\");\n    }\n    throw new Error(\"INPUTS_EXHAUSTED\");\n  }\n\n  /** @type {TransactionUnspentOutput} utxo */\n  let utxo = utxoSelection.subset\n    .splice(Math.floor(Math.random() * nbFreeUTxO), 1)\n    .pop();\n\n  utxoSelection.selection.push(utxo);\n  utxoSelection.amount = addAmounts(\n    utxo.output().amount(),\n    utxoSelection.amount\n  );\n\n  return randomSelect(utxoSelection, outputAmount, limit - 1, minUTxOValue);\n}\n\n/**\n * Select enough UTxO in DESC order to fulfill requested outputs\n * @param {UTxOSelection} utxoSelection - The set of selected/available inputs.\n * @param {Value} outputAmount - Single compiled output qty requested for payment.\n * @param {int} limit - A limit on the number of inputs that can be selected.\n * @param {int} minUTxOValue - Network protocol 'minUTxOValue' current value.\n * @throws INPUT_LIMIT_EXCEEDED if the number of randomly picked inputs exceed 'limit' parameter.\n * @throws INPUTS_EXHAUSTED if all UTxO doesn't hold enough funds to pay for output.\n * @throws MIN_UTXO_ERROR if lovelace change is under 'minUTxOValue' parameter.\n * @return {UTxOSelection} - Successful random utxo selection.\n */\nfunction descSelect(utxoSelection, outputAmount, limit, minUTxOValue) {\n  // Sort UTxO subset in DESC order for required Output unit type\n  utxoSelection.subset = utxoSelection.subset.sort((a, b) => {\n    return Number(\n      searchAmountValue(outputAmount, b.output().amount()) -\n        searchAmountValue(outputAmount, a.output().amount())\n    );\n  });\n\n  do {\n    if (limit <= 0) {\n      throw new Error(\"INPUT_LIMIT_EXCEEDED\");\n    }\n\n    if (utxoSelection.subset.length <= 0) {\n      if (isQtyFulfilled(outputAmount, utxoSelection.amount, 0, 0)) {\n        throw new Error(\"MIN_UTXO_ERROR\");\n      }\n      throw new Error(\"INPUTS_EXHAUSTED\");\n    }\n\n    /** @type {TransactionUnspentOutput} utxo */\n    let utxo = utxoSelection.subset.splice(0, 1).pop();\n\n    utxoSelection.selection.push(utxo);\n    utxoSelection.amount = addAmounts(\n      utxo.output().amount(),\n      utxoSelection.amount\n    );\n\n    limit--;\n  } while (\n    !isQtyFulfilled(\n      outputAmount,\n      utxoSelection.amount,\n      minUTxOValue,\n      utxoSelection.subset.length - 1\n    )\n  );\n\n  // Quantity is met, return subset into remaining list and return selection\n  utxoSelection.remaining = [\n    ...utxoSelection.remaining,\n    ...utxoSelection.subset,\n  ];\n  utxoSelection.subset = [];\n\n  return utxoSelection;\n}\n\n/**\n * Try to improve selection by increasing input amount in [2x,3x] range.\n * @param {UTxOSelection} utxoSelection - The set of selected/available inputs.\n * @param {Value} outputAmount - Single compiled output qty requested for payment.\n * @param {int} limit - A limit on the number of inputs that can be selected.\n * @param {ImproveRange} range - Improvement range target values\n */\nfunction improve(utxoSelection, outputAmount, limit, range) {\n  let nbFreeUTxO = utxoSelection.subset.length;\n\n  if (\n    compare(utxoSelection.amount, range.ideal) >= 0 ||\n    nbFreeUTxO <= 0 ||\n    limit <= 0\n  ) {\n    // Return subset in remaining\n    utxoSelection.remaining = [\n      ...utxoSelection.remaining,\n      ...utxoSelection.subset,\n    ];\n    utxoSelection.subset = [];\n\n    return;\n  }\n\n  /** @type {TransactionUnspentOutput} utxo */\n  const utxo = utxoSelection.subset\n    .splice(Math.floor(Math.random() * nbFreeUTxO), 1)\n    .pop();\n\n  const newAmount = Loader.Cardano.Value.new(\n    Loader.Cardano.BigNum.from_str(\"0\")\n  )\n    .checked_add(utxo.output().amount())\n    .checked_add(outputAmount);\n\n  if (\n    abs(getAmountValue(range.ideal) - getAmountValue(newAmount)) <\n      abs(getAmountValue(range.ideal) - getAmountValue(outputAmount)) &&\n    compare(newAmount, range.maximum) <= 0\n  ) {\n    utxoSelection.selection.push(utxo);\n    utxoSelection.amount = addAmounts(\n      utxo.output().amount(),\n      utxoSelection.amount\n    );\n    limit--;\n  } else {\n    utxoSelection.remaining.push(utxo);\n  }\n\n  return improve(utxoSelection, outputAmount, limit, range);\n}\n\n/**\n * Compile all required outputs to a flat amounts list\n * @param {TransactionOutputs} outputs - The set of outputs requested for payment.\n * @return {Value} - The compiled set of amounts requested for payment.\n */\nfunction mergeOutputsAmounts(outputs) {\n  let compiledAmountList = Loader.Cardano.Value.new(\n    Loader.Cardano.BigNum.from_str(\"0\")\n  );\n\n  for (let i = 0; i < outputs.len(); i++) {\n    compiledAmountList = addAmounts(\n      outputs.get(i).amount(),\n      compiledAmountList\n    );\n  }\n\n  return compiledAmountList;\n}\n\n/**\n * Add up an Amounts List values to another Amounts List\n * @param {Value} amounts - Set of amounts to be added.\n * @param {Value} compiledAmounts - The compiled set of amounts.\n * @return {Value}\n */\nfunction addAmounts(amounts, compiledAmounts) {\n  return compiledAmounts.checked_add(amounts);\n}\n\n/**\n * Split amounts contained in a single {Value} object in separate {Value} objects\n * @param {Value} amounts - Set of amounts to be split.\n * @throws MIN_UTXO_ERROR if lovelace change is under 'minUTxOValue' parameter.\n * @return {AmountList}\n */\nfunction splitAmounts(amounts) {\n  let splitAmounts = [];\n\n  if (amounts.multiasset()) {\n    let mA = amounts.multiasset();\n\n    for (let i = 0; i < mA.keys().len(); i++) {\n      let scriptHash = mA.keys().get(i);\n\n      for (let j = 0; j < mA.get(scriptHash).keys().len(); j++) {\n        let _assets = Loader.Cardano.Assets.new();\n        let assetName = mA.get(scriptHash).keys().get(j);\n\n        _assets.insert(\n          Loader.Cardano.AssetName.from_bytes(assetName.to_bytes()),\n          Loader.Cardano.BigNum.from_bytes(\n            mA.get(scriptHash).get(assetName).to_bytes()\n          )\n        );\n\n        let _multiasset = Loader.Cardano.MultiAsset.new();\n        _multiasset.insert(\n          Loader.Cardano.ScriptHash.from_bytes(scriptHash.to_bytes()),\n          _assets\n        );\n        let _value = Loader.Cardano.Value.new(\n          Loader.Cardano.BigNum.from_str(\"0\")\n        );\n        _value.set_multiasset(_multiasset);\n\n        splitAmounts.push(_value);\n      }\n    }\n  }\n\n  // Order assets by qty DESC\n  splitAmounts = sortAmountList(splitAmounts, \"DESC\");\n\n  // Insure lovelace is last to account for min ada requirement\n  splitAmounts.push(\n    Loader.Cardano.Value.new(\n      Loader.Cardano.BigNum.from_bytes(amounts.coin().to_bytes())\n    )\n  );\n\n  return splitAmounts;\n}\n\n/**\n * Sort a mismatched AmountList ASC/DESC\n * @param {AmountList} amountList - Set of mismatched amounts to be sorted.\n * @param {string} [sortOrder=ASC] - Order\n * @return {AmountList} - The sorted AmountList\n */\nfunction sortAmountList(amountList, sortOrder = \"ASC\") {\n  return amountList.sort((a, b) => {\n    let sortInt = sortOrder === \"DESC\" ? BigInt(-1) : BigInt(1);\n    return Number((getAmountValue(a) - getAmountValue(b)) * sortInt);\n  });\n}\n\n/**\n * Return BigInt amount value\n * @param {Value} amount\n * @return {bigint}\n */\nfunction getAmountValue(amount) {\n  let val = BigInt(0);\n  let lovelace = BigInt(amount.coin().to_str());\n\n  if (lovelace > 0) {\n    val = lovelace;\n  } else if (amount.multiasset() && amount.multiasset().len() > 0) {\n    let scriptHash = amount.multiasset().keys().get(0);\n    let assetName = amount.multiasset().get(scriptHash).keys().get(0);\n    val = BigInt(amount.multiasset().get(scriptHash).get(assetName).to_str());\n  }\n\n  return val;\n}\n\n/**\n * Search & Return BigInt amount value\n * @param {Value} needle\n * @param {Value} haystack\n * @return {bigint}\n */\nfunction searchAmountValue(needle, haystack) {\n  let val = BigInt(0);\n  let lovelace = BigInt(needle.coin().to_str());\n\n  if (lovelace > 0) {\n    val = BigInt(haystack.coin().to_str());\n  } else if (\n    needle.multiasset() &&\n    haystack.multiasset() &&\n    needle.multiasset().len() > 0 &&\n    haystack.multiasset().len() > 0\n  ) {\n    let scriptHash = needle.multiasset().keys().get(0);\n    let assetName = needle.multiasset().get(scriptHash).keys().get(0);\n    val = BigInt(haystack.multiasset().get(scriptHash).get(assetName).to_str());\n  }\n\n  return val;\n}\n\n/**\n * Narrow down remaining UTxO set in case of native token, use full set for lovelace\n * @param {UTxOSelection} utxoSelection - The set of selected/available inputs.\n * @param {Value} output - Single compiled output qty requested for payment.\n */\nfunction createSubSet(utxoSelection, output) {\n  if (BigInt(output.coin().to_str()) < BigInt(1)) {\n    let subset = [];\n    let remaining = [];\n    for (let i = 0; i < utxoSelection.remaining.length; i++) {\n      if (\n        compare(utxoSelection.remaining[i].output().amount(), output) !==\n        undefined\n      ) {\n        subset.push(utxoSelection.remaining[i]);\n      } else {\n        remaining.push(utxoSelection.remaining[i]);\n      }\n    }\n    utxoSelection.subset = subset;\n    utxoSelection.remaining = remaining;\n  } else {\n    utxoSelection.subset = utxoSelection.remaining.splice(\n      0,\n      utxoSelection.remaining.length\n    );\n  }\n}\n\n/**\n * Is Quantity Fulfilled Condition - Handle 'minUTxOValue' protocol parameter.\n * @param {Value} outputAmount - Single compiled output qty requested for payment.\n * @param {Value} cumulatedAmount - Single compiled accumulated UTxO qty.\n * @param {int} minUTxOValue - Network protocol 'minUTxOValue' current value.\n * @param {int} nbFreeUTxO - Number of free UTxO available.\n * @return {boolean}\n */\nfunction isQtyFulfilled(\n  outputAmount,\n  cumulatedAmount,\n  minUTxOValue,\n  nbFreeUTxO\n) {\n  let amount = outputAmount;\n\n  if (minUTxOValue && BigInt(outputAmount.coin().to_str()) > 0) {\n    let minAmount = Loader.Cardano.Value.new(\n      Loader.Cardano.min_ada_required(\n        cumulatedAmount,\n        Loader.Cardano.BigNum.from_str(minUTxOValue.toString())\n      )\n    );\n\n    // Lovelace min amount to cover assets and number of output need to be met\n    if (compare(cumulatedAmount, minAmount) < 0) return false;\n\n    // If requested Lovelace lower than minAmount, plan for change\n    if (compare(outputAmount, minAmount) < 0) {\n      amount = minAmount.checked_add(\n        Loader.Cardano.Value.new(\n          Loader.Cardano.BigNum.from_str(protocolParameters.minUTxO)\n        )\n      );\n    }\n\n    // Try covering the max fees\n    if (nbFreeUTxO > 0) {\n      let maxFee =\n        BigInt(protocolParameters.minFeeA) *\n          BigInt(protocolParameters.maxTxSize) +\n        BigInt(protocolParameters.minFeeB);\n\n      maxFee = Loader.Cardano.Value.new(\n        Loader.Cardano.BigNum.from_str(maxFee.toString())\n      );\n\n      amount = amount.checked_add(maxFee);\n    }\n  }\n\n  return compare(cumulatedAmount, amount) >= 0;\n}\n\n/**\n * Return a deep copy of UTxOSelection\n * @param {UTxOSelection} utxoSelection\n * @return {UTxOSelection} Clone - Deep copy\n */\nfunction cloneUTxOSelection(utxoSelection) {\n  return {\n    selection: cloneUTxOList(utxoSelection.selection),\n    remaining: cloneUTxOList(utxoSelection.remaining),\n    subset: cloneUTxOList(utxoSelection.subset),\n    amount: cloneValue(utxoSelection.amount),\n  };\n}\n\n/**\n * Return a deep copy of an UTxO List\n * @param {UTxOList} utxoList\n * @return {UTxOList} Cone - Deep copy\n */\nconst cloneUTxOList = (utxoList) =>\n  utxoList.map((utxo) =>\n    Loader.Cardano.TransactionUnspentOutput.from_bytes(utxo.to_bytes())\n  );\n\n/**\n * Return a deep copy of a Value object\n * @param {Value} value\n * @return {Value} Cone - Deep copy\n */\nconst cloneValue = (value) => Loader.Cardano.Value.from_bytes(value.to_bytes());\n\n// Helper\nfunction abs(big) {\n  return big < 0 ? big * BigInt(-1) : big;\n}\n\n/**\n * Compare a candidate value to the one in a group if present\n * @param {Value} group\n * @param {Value} candidate\n * @return {int} - -1 group lower, 0 equal, 1 group higher, undefined if no match\n */\nfunction compare(group, candidate) {\n  let gQty = BigInt(group.coin().to_str());\n  let cQty = BigInt(candidate.coin().to_str());\n\n  if (candidate.multiasset()) {\n    let cScriptHash = candidate.multiasset().keys().get(0);\n    let cAssetName = candidate.multiasset().get(cScriptHash).keys().get(0);\n\n    if (group.multiasset() && group.multiasset().len()) {\n      if (\n        group.multiasset().get(cScriptHash) &&\n        group.multiasset().get(cScriptHash).get(cAssetName)\n      ) {\n        gQty = BigInt(\n          group.multiasset().get(cScriptHash).get(cAssetName).to_str()\n        );\n        cQty = BigInt(\n          candidate.multiasset().get(cScriptHash).get(cAssetName).to_str()\n        );\n      } else {\n        return undefined;\n      }\n    } else {\n      return undefined;\n    }\n  }\n\n  return gQty >= cQty ? (gQty === cQty ? 0 : 1) : -1;\n}\n\nexport default CoinSelection;\n","import Loader from \"./loader.js\";\nimport {\n  assetsToValue,\n  fromAscii,\n  fromHex,\n  getTradeDetails,\n  lovelacePercentage,\n  toBytesNum,\n  toHex,\n  valueToAssets,\n} from \"./utils.js\";\nimport { languageViews } from \"./languageViews.js\";\nimport { contract } from \"./plutus.js\";\nimport CoinSelection from \"./coinSelection.js\";\nimport {\n  Address,\n  PlutusData,\n  TransactionUnspentOutput,\n} from \"./custom_modules/@emurgo/cardano-serialization-lib-browser/cardano_serialization_lib.js\";\n\nconst DATUM_LABEL = 405;\nconst ADDRESS_LABEL = 406;\n\n// Validator\nconst CONTRACT = () => {\n  const scripts = Loader.Cardano.PlutusScripts.new();\n  scripts.add(Loader.Cardano.PlutusScript.new(fromHex(contract)));\n  return scripts;\n};\n\nconst CONTRACT_ADDRESS = () =>\n  Loader.Cardano.Address.from_bech32(\n    //\"addr_test1wrar7ewvyxc4h8sg9xgmk8kyyzlpktsmcpwnakp24nuh8ucma9934\"\n    \"addr_test1wqwkldau5tz2w4ju4r7ulz5hlfm60dlq89mc30ype4hxx9cqkcj6h\"\n  );\n\n// Datums -- This is going to take a bit to unpack everything and then we need to construct our transactions.\nconst OFFER = ({ tradeOwner, requestedAmount, privateRecip }) => {\n  /* - This was used while trying to troubleshoot datum serialization.\n  const fieldsInner = Loader.Cardano.PlutusList.new();\n  fieldsInner.add(Loader.Cardano.PlutusData.new_bytes(fromHex(tradeOwner)));\n  fieldsInner.add(Loader.Cardano.PlutusData.new_map(Loader.Cardano.PlutusMap.from_bytes(\n    toHex(fromAscii('{\"\", {\"\", 1000000}}'))\n  )));\n  fieldsInner.add(Loader.Cardano.PlutusData.new_bytes(fromHex(privateRecip)));\n  const tradeDetails = Loader.Cardano.PlutusList.new();\n  tradeDetails.add(\n    Loader.Cardano.PlutusData.new_constr_plutus_data(\n      Loader.Cardano.ConstrPlutusData.new(\n        Loader.Cardano.Int.new_i32(0),\n        fieldsInner\n      )\n    )\n  );*/\n\n  const fieldsInner = Loader.Cardano.PlutusList.new();\n  fieldsInner.add(Loader.Cardano.PlutusData.new_bytes(fromHex(tradeOwner)));\n  fieldsInner.add(Loader.Cardano.PlutusData.new_bytes(requestedAmount));\n  fieldsInner.add(Loader.Cardano.PlutusData.new_bytes(fromHex(privateRecip)));\n  const tradeDetails = Loader.Cardano.PlutusList.new();\n  tradeDetails.add(\n    Loader.Cardano.PlutusData.new_constr_plutus_data(\n      Loader.Cardano.ConstrPlutusData.new(\n        Loader.Cardano.Int.new_i32(0),\n        fieldsInner\n      )\n    )\n  );\n  const datum = Loader.Cardano.PlutusData.new_constr_plutus_data(\n    Loader.Cardano.ConstrPlutusData.new(\n      Loader.Cardano.Int.new_i32(DATUM_TYPE.Offer),\n      tradeDetails\n    )\n  );\n  return datum;\n};\n\nconst DATUM_TYPE = {\n  Offer: 0,\n}\n\n// \"\"transaction submit error ShelleyTxValidationError ShelleyBasedEraAlonzo (ApplyTxError [UtxowFailure (WrappedShelleyEraFailure (UtxoFailure \n// (UtxosFailure (ValidationTagMismatch (IsValid True) (FailedUnexpectedly [PlutusFailure \\\"\\\\n\n// The 3 arg plutus script (PlutusScript ScriptHash \\\\\\\"fa3f65cc21b15b9e082991bb1ec420be1b2e1bc05d3ed82aacf973f3\\\\\\\") fails.\\\\nCek\n// Error An error has occurred:  User error:\\\\nThe provided Plutus code called 'error'.\\\\n\n// The data is: Constr 0 [\n                // Constr 0 [\n                  // B \\\\\\\"\\\\\\\\254\\\\\\\\t!\\\\\\\\207\\\\\\\\165;-\\\\\\\\238\\\\\\\\242\\\\\\\\SI\\\\\\\\CANRX\\\\\\\\248\\\\\\\\1\n                  // 88n\\\\\\\\DC2z\\\\\\\\182\\\\\\\\250\\\\\\\\DLE\\\\\\\\132\\\\\\\\230/\\\\\\\\b0\\\\\\\\221\\\\\\\\239\\\\\\\",B \\\\\\\"\\\\\\\",\n                  // B \\\\\\\"\\\\\\\\254\\\\\\\\t!\\\\\\\\207\\\\\\\\165;-\\\\\\\\238\\\\\\\\242\\\\\\\\SI\\\\\\\\CANRX\\\\\\\\248\\\\\\\\1\"\n\nconst BUY = (index) => {\n  const redeemerData = Loader.Cardano.PlutusData.new_constr_plutus_data(\n    Loader.Cardano.ConstrPlutusData.new(\n      Loader.Cardano.Int.new_i32(0),\n      Loader.Cardano.PlutusList.new()\n    )\n  );\n  const redeemer = Loader.Cardano.Redeemer.new(\n    Loader.Cardano.RedeemerTag.new_spend(),\n    Loader.Cardano.BigNum.from_str(index),\n    redeemerData,\n    Loader.Cardano.ExUnits.new(\n      Loader.Cardano.BigNum.from_str(\"694200\"),\n      Loader.Cardano.BigNum.from_str(\"300000000\")\n                                   // 19489133\")\n    )\n  );\n  return redeemer;\n};\n\nconst CANCEL = (index) => {\n  const redeemerData = Loader.Cardano.PlutusData.new_constr_plutus_data(\n    Loader.Cardano.ConstrPlutusData.new(\n      Loader.Cardano.Int.new_i32(1),\n      Loader.Cardano.PlutusList.new()\n    )\n  );\n  const redeemer = Loader.Cardano.Redeemer.new(\n    Loader.Cardano.RedeemerTag.new_spend(),\n    Loader.Cardano.BigNum.from_str(index),\n    redeemerData,\n    Loader.Cardano.ExUnits.new(\n      Loader.Cardano.BigNum.from_str(\"694200\"),\n      Loader.Cardano.BigNum.from_str(\"300000000\")\n                                  //  19489133\")\n    )\n  );\n  return redeemer;\n};\n\nconst toFraction = (p) => Math.floor(1 / (p / 1000));\n\nclass Escrow {\n  constructor({ base, projectId }) {\n    this.provider = { base, projectId };\n  }\n\n  /**\n   *\n   * @typedef {Object} TradeUtxo\n   * @property {PlutusData} datum\n   * @property {Address} tradeOwnerAddress\n   * @property {TransactionUnspentOutput} utxo\n   * @property {string} budId\n   * @property {string} lovelace bid amount or requested amount from offer\n   */\n\n  /**\n   *@private\n   */\n  async blockfrostRequest(endpoint, headers, body) {\n    return await fetch(this.provider.base + endpoint, {\n      headers: {\n        project_id: this.provider.projectId,\n        ...headers,\n        \"User-Agent\": \"cardano-escrow\",\n      },\n      method: body ? \"POST\" : \"GET\",\n      body,\n    }).then((res) => res.json());\n  }\n\n  /**\n   * @private\n   * @returns {TradeUtxo[]}\n   */\n  async getUtxo(offer) {\n    const utxos = await this.blockfrostRequest(\n      `/addresses/${CONTRACT_ADDRESS().to_bech32()}/utxos`\n    );\n\n    utxos.filter(async (utxo) => {\n      let assetValue = assetsToValue(utxo.amount)\n      if (assetValue.compare(offer) == 1) {\n        return true;\n      } else {\n        return false;\n      }\n    })\n\n    console.log(JSON.stringify(utxos))\n\n    return await Promise.all(\n      utxos.map(async (utxo) => {\n        return {\n          offer,\n          utxo: Loader.Cardano.TransactionUnspentOutput.new(\n            Loader.Cardano.TransactionInput.new(\n              Loader.Cardano.TransactionHash.from_bytes(fromHex(utxo.tx_hash)),\n              utxo.output_index\n            ),\n            Loader.Cardano.TransactionOutput.new(\n              CONTRACT_ADDRESS(),\n              assetsToValue(utxo.amount)\n            )\n          ),\n        };\n      })\n    );\n  }\n\n  /**\n   *@private\n   */\n  async initTx() {\n    const txBuilder = Loader.Cardano.TransactionBuilder.new(\n      Loader.Cardano.LinearFee.new(\n        Loader.Cardano.BigNum.from_str(\n          this.protocolParameters.linearFee.minFeeA\n        ),\n        Loader.Cardano.BigNum.from_str(\n          this.protocolParameters.linearFee.minFeeB\n        )\n      ),\n      Loader.Cardano.BigNum.from_str(this.protocolParameters.minUtxo),\n      Loader.Cardano.BigNum.from_str(this.protocolParameters.poolDeposit),\n      Loader.Cardano.BigNum.from_str(this.protocolParameters.keyDeposit),\n      this.protocolParameters.maxValSize,\n      this.protocolParameters.maxTxSize,\n      this.protocolParameters.priceMem,\n      this.protocolParameters.priceStep,\n      Loader.Cardano.LanguageViews.new(Buffer.from(languageViews, \"hex\"))\n    );\n    const datums = Loader.Cardano.PlutusList.new();\n    const metadata = { [ADDRESS_LABEL]: {}};\n    const outputs = Loader.Cardano.TransactionOutputs.new();\n    return { txBuilder, datums, metadata, outputs };\n  }\n\n  /*const createTxOutput = (address, value, { datum } = {}) => {\n    const minAda = Cardano.Instance.min_ada_required(\n      value,\n      Cardano.Instance.BigNum.from_str(getProtocolParameters().coinsPerUtxoWord),\n      datum && Cardano.Instance.hash_plutus_data(datum)\n    );\n  \n    if (minAda.compare(value.coin()) === 1) value.set_coin(minAda);\n  \n    const output = Cardano.Instance.TransactionOutput.new(address, value);\n  \n    if (datum) {\n      output.set_data_hash(Cardano.Instance.hash_plutus_data(datum));\n    }\n  \n    return output;\n  };*/\n\n  /**\n   * @private\n   */\n  createOutput(\n    address,\n    value,\n    { datum, tradeOwnerAddress, metadata } = {}\n  ) {\n    const minAda = Loader.Cardano.min_ada_required(\n      value,\n      Loader.Cardano.BigNum.from_str(this.protocolParameters.minUtxo),\n      datum && Loader.Cardano.hash_plutus_data(datum)\n    );\n\n    if (minAda.compare(value.coin()) == 1) value.set_coin(minAda);\n    const output = Loader.Cardano.TransactionOutput.new(address, value);\n\n    if (datum) {\n      output.set_data_hash(Loader.Cardano.hash_plutus_data(datum));\n    }\n\n    if (tradeOwnerAddress) {\n      metadata[ADDRESS_LABEL].address = \"0x\" + toHex(tradeOwnerAddress.to_address().to_bytes());\n    }\n\n    return output;\n  }\n\n  /**\n   * @private\n   */\n  setCollateral(txBuilder, utxos) {\n    const inputs = Loader.Cardano.TransactionInputs.new();\n    utxos.forEach((utxo) => {\n      inputs.add(utxo.input());\n    });\n    txBuilder.set_collateral(inputs);\n  }\n\n  /**\n   * @private\n   */\n  async finalizeTx({\n    txBuilder,\n    changeAddress,\n    utxos,\n    outputs,\n    datums,\n    metadata,\n    scriptUtxo,\n    action,\n  }) {\n    console.log(outputs)\n    const transactionWitnessSet = Loader.Cardano.TransactionWitnessSet.new();\n    let { input, change } = CoinSelection.randomImprove(\n      utxos,\n      outputs,\n      8,\n      scriptUtxo ? [scriptUtxo] : []\n    );\n    input.forEach((utxo) => {\n      txBuilder.add_input(\n        utxo.output().address(),\n        utxo.input(),\n        utxo.output().amount()\n      );\n    });\n    for (let i = 0; i < outputs.len(); i++) {\n      txBuilder.add_output(outputs.get(i));\n    }\n    if (scriptUtxo) {\n      const redeemers = Loader.Cardano.Redeemers.new();\n      const redeemerIndex = txBuilder\n        .index_of_input(scriptUtxo.input())\n        .toString();\n      redeemers.add(action(redeemerIndex));\n      txBuilder.set_redeemers(\n        Loader.Cardano.Redeemers.from_bytes(redeemers.to_bytes())\n      );\n      txBuilder.set_plutus_data(\n        Loader.Cardano.PlutusList.from_bytes(datums.to_bytes())\n      );\n      txBuilder.set_plutus_scripts(CONTRACT());\n      const collateral = (await window.cardano.getCollateral()).map((utxo) =>\n        Loader.Cardano.TransactionUnspentOutput.from_bytes(fromHex(utxo))\n      );\n      if (collateral.length <= 0) throw new Error(\"NO_COLLATERAL\");\n      this.setCollateral(txBuilder, collateral);\n\n      transactionWitnessSet.set_plutus_scripts(CONTRACT());\n      transactionWitnessSet.set_plutus_data(datums);\n      transactionWitnessSet.set_redeemers(redeemers);\n    }\n    let aux_data;\n    if (metadata) {\n      aux_data = Loader.Cardano.AuxiliaryData.new();\n      const generalMetadata = Loader.Cardano.GeneralTransactionMetadata.new();\n      Object.keys(metadata).forEach((label) => {\n        Object.keys(metadata[label]).length > 0 &&\n          generalMetadata.insert(\n            Loader.Cardano.BigNum.from_str(label),\n            Loader.Cardano.encode_json_str_to_metadatum(\n              JSON.stringify(metadata[label]),\n              1\n            )\n          );\n      });\n      aux_data.set_metadata(generalMetadata);\n      txBuilder.set_auxiliary_data(aux_data);\n    }\n\n    const changeMultiAssets = change.multiasset();\n\n    // check if change value is too big for single output\n    if (\n      changeMultiAssets &&\n      change.to_bytes().length * 2 > this.protocolParameters.maxValSize\n    ) {\n      const partialChange = Loader.Cardano.Value.new(\n        Loader.Cardano.BigNum.from_str(\"0\")\n      );\n\n      const partialMultiAssets = Loader.Cardano.MultiAsset.new();\n      const policies = changeMultiAssets.keys();\n      const makeSplit = () => {\n        for (let j = 0; j < changeMultiAssets.len(); j++) {\n          const policy = policies.get(j);\n          const policyAssets = changeMultiAssets.get(policy);\n          const assetNames = policyAssets.keys();\n          const assets = Loader.Cardano.Assets.new();\n          for (let k = 0; k < assetNames.len(); k++) {\n            const policyAsset = assetNames.get(k);\n            const quantity = policyAssets.get(policyAsset);\n            assets.insert(policyAsset, quantity);\n            //check size\n            const checkMultiAssets = Loader.Cardano.MultiAsset.from_bytes(\n              partialMultiAssets.to_bytes()\n            );\n            checkMultiAssets.insert(policy, assets);\n            const checkValue = Loader.Cardano.Value.new(\n              Loader.Cardano.BigNum.from_str(\"0\")\n            );\n            checkValue.set_multiasset(checkMultiAssets);\n            if (\n              checkValue.to_bytes().length * 2 >=\n              this.protocolParameters.maxValSize\n            ) {\n              partialMultiAssets.insert(policy, assets);\n              return;\n            }\n          }\n          partialMultiAssets.insert(policy, assets);\n        }\n      };\n      makeSplit();\n      partialChange.set_multiasset(partialMultiAssets);\n      const minAda = Loader.Cardano.min_ada_required(\n        partialChange,\n        Loader.Cardano.BigNum.from_str(this.protocolParameters.minUtxo)\n      );\n      partialChange.set_coin(minAda);\n\n      txBuilder.add_output(\n        Loader.Cardano.TransactionOutput.new(\n          changeAddress.to_address(),\n          partialChange\n        )\n      );\n    }\n\n    txBuilder.add_change_if_needed(changeAddress.to_address());\n    const txBody = txBuilder.build();\n    const tx = Loader.Cardano.Transaction.new(\n      txBody,\n      Loader.Cardano.TransactionWitnessSet.from_bytes(\n        transactionWitnessSet.to_bytes()\n      ),\n      aux_data\n    );\n    const size = tx.to_bytes().length * 2;\n    console.log(size);\n    if (size > this.protocolParameters.maxTxSize)\n      throw new Error(\"MAX_SIZE_REACHED\");\n    let txVkeyWitnesses = await window.cardano.signTx(\n      toHex(tx.to_bytes()),\n      true\n    );\n    txVkeyWitnesses = Loader.Cardano.TransactionWitnessSet.from_bytes(\n      fromHex(txVkeyWitnesses)\n    );\n    transactionWitnessSet.set_vkeys(txVkeyWitnesses.vkeys());\n    const signedTx = Loader.Cardano.Transaction.new(\n      tx.body(),\n      transactionWitnessSet,\n      tx.auxiliary_data()\n    );\n\n    console.log(\"Full Tx Size\", signedTx.to_bytes().length);\n\n    const txHash = await window.cardano.submitTx(toHex(signedTx.to_bytes()));\n    return txHash;\n  }\n\n  async load() {\n    await Loader.load();\n    const p = await this.blockfrostRequest(`/epochs/latest/parameters`);\n    this.protocolParameters = {\n      linearFee: {\n        minFeeA: p.min_fee_a.toString(),\n        minFeeB: p.min_fee_b.toString(),\n      },\n      minUtxo: \"1000000\",\n      poolDeposit: \"500000000\",\n      keyDeposit: \"2000000\",\n      maxValSize: \"5000\",\n      maxTxSize: 16384,\n      priceMem: 5.77e-2,\n      priceStep: 7.21e-5,\n    };\n\n    this.contractInfo = {\n      owner1: {\n        address: Loader.Cardano.Address.from_bech32(\n          //\"addr1w967qqlqwjwwg5lugxvnx2taudl5apvnynw8n5g4dvmfn7g0j8gtz\"\n          \"addr_test1wp67qqlqwjwwg5lugxvnx2taudl5apvnynw8n5g4dvmfn7g56n5y8\"\n        ),\n        fee1: Loader.Cardano.BigNum.from_str(\"1000\"), // 1.0%\n        fee2: Loader.Cardano.BigNum.from_str(\"1111\"), // 0.9%\n      },\n      owner2: {\n        address: Loader.Cardano.Address.from_bech32(\n          // \"addr1wy02upg5vew7dty35za98pl8v36whk5ucux8xqwt0gf9ycglp29ku\"\n          \"addr_test1wq02upg5vew7dty35za98pl8v36whk5ucux8xqwt0gf9ycgyf7eee\"\n        ),\n        fee: Loader.Cardano.BigNum.from_str(\"10000\"), // 0.1%\n      },\n    };\n\n    CoinSelection.setProtocolParameters(\n      this.protocolParameters.minUtxo,\n      this.protocolParameters.linearFee.minFeeA,\n      this.protocolParameters.linearFee.minFeeB,\n      this.protocolParameters.maxTxSize.toString()\n    );\n  }\n\n// Endpoints\n  async offer(offer, requestedAmount, privateRecip) {\n    const { txBuilder, datums, metadata, outputs } = await this.initTx();\n    const walletAddress = Loader.Cardano.BaseAddress.from_address(\n      Loader.Cardano.Address.from_bytes(\n        fromHex((await window.cardano.getUsedAddresses())[0])\n      )\n    );\n\n    const utxos = (await window.cardano.getUtxos()).map((utxo) =>\n      Loader.Cardano.TransactionUnspentOutput.from_bytes(fromHex(utxo))\n    );\n\n    const offerDatum = OFFER({\n      tradeOwner: toHex(walletAddress.payment_cred().to_keyhash().to_bytes()),\n      requestedAmount: requestedAmount,\n      privateRecip: privateRecip == \"\" ? toHex(walletAddress.payment_cred().to_keyhash().to_bytes()) : privateRecip\n    });\n\n    outputs.add(\n      this.createOutput(\n        CONTRACT_ADDRESS(),\n        offer,\n        {\n          datum: offerDatum,\n          index: 0,\n          tradeOwnerAddress: walletAddress,\n          metadata,\n        }\n      )\n    );\n    datums.add(offerDatum);\n\n    const txHash = await this.finalizeTx({\n      txBuilder,\n      changeAddress: walletAddress,\n      utxos,\n      outputs,\n      datums,\n      metadata,\n    });\n    return txHash;\n  }\n\n  async getOffer(offer) {\n    const offerUtxo = await this.getUtxo(offer);\n    if (offerUtxo.length === 1) {\n      return offerUtxo[0];\n    }\n    if (offerUtxo.length === 0) {\n      return null;\n    }\n    console.log(\"DANGER: Multiple potentially valid offers in the script.\")\n    return offerUtxo[0];\n  }\n\n  async purchase(tradeOwnerAddress, offer, requestedAmount) {\n    const { txBuilder, datums, metadata, outputs } = await this.initTx();\n\n    const nTradeOwnerAddress = Loader.Cardano.BaseAddress.from_address(\n      Loader.Cardano.Address.from_bech32(\n        tradeOwnerAddress\n      )\n    );\n    // console.log(nTradeOwnerAddress.payment_cred().to_keyhash().to_bytes())\n\n    const walletAddress = Loader.Cardano.BaseAddress.from_address(\n      Loader.Cardano.Address.from_bytes(\n        fromHex((await window.cardano.getUsedAddresses())[0])\n      )\n    );\n    // console.log(walletAddress.payment_cred().to_keyhash().to_bytes())\n\n    const utxos = (await window.cardano.getUtxos()).map((utxo) =>\n      Loader.Cardano.TransactionUnspentOutput.from_bytes(fromHex(utxo))\n    );\n    console.log(JSON.stringify(utxos))\n\n    const offerUtxo = await this.getOffer(offer);\n    if (offerUtxo == null) {\n      throw \"Offer is null.\";\n    }\n\n    const offerDatum = OFFER({\n      tradeOwner: toHex(nTradeOwnerAddress.payment_cred().to_keyhash().to_bytes()),\n      requestedAmount: requestedAmount,\n      privateRecip: toHex(nTradeOwnerAddress.payment_cred().to_keyhash().to_bytes())\n    });\n    datums.add(offerDatum);\n\n    const numDatum = Loader.Cardano.PlutusData.new_bytes(42)\n\n    const value = offerUtxo.utxo.output().amount();\n\n    outputs.add(\n      this.createOutput(\n        walletAddress.to_address(),\n        value,\n        {index:0}\n      )); // buyer receiving Offer\n   \n    console.log(\"requestedAmount: \" + valueToAssets(requestedAmount));\n    outputs.add(\n      this.createOutput(\n        nTradeOwnerAddress.to_address(),\n        /*assetsToValue([\n          {\n            unit: \"lovelace\"\n          , quantity: \"1000000\"\n          },\n          { unit: \"74f43bdf645aaeb25f39c6392cdb771ff4eb4da0c017cc183c490b8f\" + fromAscii(\"csnft12\")\n          , quantity: \"1\"\n          }\n        ]),*/\n        requestedAmount,\n        {index:1}\n      ));\n\n    outputs.add(\n      this.createOutput(\n        this.contractInfo.owner1.address,\n        assetsToValue([{unit: \"lovelace\", quantity: \"4000000\"}]),\n        {\n          datum: numDatum,\n          index: 2\n        }\n      )\n    );\n    datums.add(numDatum);\n\n    outputs.add(\n      this.createOutput(\n        this.contractInfo.owner2.address,\n        assetsToValue([{unit: \"lovelace\", quantity: \"1000000\"}]),\n        {\n          datum: numDatum,\n          index: 3\n        }\n      )\n    );\n    datums.add(numDatum);\n\n    const requiredSigners = Loader.Cardano.Ed25519KeyHashes.new();\n    requiredSigners.add(walletAddress.payment_cred().to_keyhash());\n    txBuilder.set_required_signers(requiredSigners);\n\n    const txHash = await this.finalizeTx({\n      txBuilder,\n      changeAddress: walletAddress,\n      utxos,\n      outputs,\n      datums,\n      scriptUtxo: offerUtxo.utxo,\n      action: BUY,\n    });\n    return txHash;\n  }\n\n  async cancelOffer(tradeOwnerAddress, offer, requestedAmount) {\n    const { txBuilder, datums, outputs } = await this.initTx();\n\n    const walletAddress = Loader.Cardano.BaseAddress.from_address(\n      Loader.Cardano.Address.from_bytes(\n        fromHex((await window.cardano.getUsedAddresses())[0])\n      )\n    );\n\n    const utxos = (await window.cardano.getUtxos()).map((utxo) =>\n      Loader.Cardano.TransactionUnspentOutput.from_bytes(fromHex(utxo))\n    );\n\n    const offerUtxo = this.getOffer(offer);\n\n    const offerDatum = OFFER({\n      tradeOwner: toHex(tradeOwnerAddress.payment_cred().to_keyhash().to_bytes()),\n      requestedAmount: requestedAmount,\n      privateRecip: toHex(tradeOwnerAddress.payment_cred().to_keyhash().to_bytes())\n    });\n    datums.add(offerDatum);\n\n    const value = offerUtxo.utxo.output().amount();\n\n    outputs.add(this.createOutput(walletAddress.to_address(), value)); // Seller canceling offer.\n\n    const requiredSigners = Loader.Cardano.Ed25519KeyHashes.new();\n    requiredSigners.add(walletAddress.payment_cred().to_keyhash());\n    txBuilder.set_required_signers(requiredSigners);\n\n    const txHash = await this.finalizeTx({\n      txBuilder,\n      changeAddress: walletAddress,\n      utxos,\n      outputs,\n      datums,\n      scriptUtxo: offerUtxo.utxo,\n      action: CANCEL,\n    });\n    return txHash;\n  }\n\n}\n\nexport default Escrow;\n","/*export const contract = \"\";*/\nexport const contract =\n  \"59100d010000332333222332233322233223322332232323332223233322232333333332222222232333222323333222232323322323332223232323322332232323333322222332233223322332233223322223223223232533530303330083333573466e1cd55cea8032400046094646464646666ae68cdc39aab9d5003480008ccc888ccc15000c008004dd71aba150033335502775ca04c6ae854008dd71aba135744a00446a0966a609866ae71241035054310004d49926135744a00226aae7940044dd50009aba135573ca00e46a08c6a608e66ae712410350543100048499263333573466e1d40112002205323333573466e1d401520002055235047353048335738921035054310004949926498cccd5cd19b8735573aa004900011980599191919191919191919191999ab9a3370e6aae754029200023333333333019335027232323333573466e1cd55cea8012400046603e606e6ae854008c0b0d5d09aba250022350563530573357389201035054310005849926135573ca00226ea8004d5d0a80519a8138141aba150093335502e75ca05a6ae854020ccd540b9d728169aba1500733502704035742a00c66a04e66aa0a2092eb4d5d0a8029919191999ab9a3370e6aae754009200023350213232323333573466e1cd55cea80124000466a05266a07eeb4d5d0a80118221aba135744a00446a0b46a60b666ae712401035054310005c49926135573ca00226ea8004d5d0a8011919191999ab9a3370e6aae7540092000233502733503f75a6ae854008c110d5d09aba2500223505a35305b3357389201035054310005c49926135573ca00226ea8004d5d09aba250022350563530573357389201035054310005849926135573ca00226ea8004d5d0a80219a813bae35742a00666a04e66aa0a2eb88004d5d0a801181b1aba135744a00446a0a46a60a666ae71241035054310005449926135744a00226ae8940044d5d1280089aba25001135744a00226ae8940044d5d1280089aba25001135573ca00226ea8004d5d0a8011919191999ab9a3370ea00290031180f181c1aba135573ca00646666ae68cdc3a801240084603a60846ae84d55cf280211999ab9a3370ea00690011180e98169aba135573ca00a46666ae68cdc3a80224000460406eb8d5d09aab9e500623504d35304e3357389201035054310004f49926499264984d55cea80089baa001357426ae8940088d4118d4c11ccd5ce2490350543100048499261047135045353046335738920103505435000474984d55cf280089baa001135573a6ea80044dd50009109198008018011000911111111109199999999980080580500480400380300280200180110009109198008018011000891091980080180109000891091980080180109000891091980080180109000909111180200290911118018029091111801002909111180080290008919118011bac0013200135503b2233335573e0024a070466a06e60086ae84008c00cd5d100101811919191999ab9a3370e6aae75400d200023330073232323333573466e1cd55cea8012400046601a605c6ae854008cd40400a8d5d09aba25002235033353034335738921035054310003549926135573ca00226ea8004d5d0a801999aa805bae500a35742a00466a018eb8d5d09aba2500223502f353030335738921035054310003149926135744a00226aae7940044dd50009110919980080200180110009109198008018011000899aa800bae75a224464460046eac004c8004d540d488c8cccd55cf80112819919a81919aa81a98031aab9d5002300535573ca00460086ae8800c0ac4d5d080089119191999ab9a3370ea002900011a80418029aba135573ca00646666ae68cdc3a801240044a01046a0526a605466ae71241035054310002b499264984d55cea80089baa001121223002003112200112001232323333573466e1cd55cea8012400046600c600e6ae854008dd69aba135744a00446a0466a604866ae71241035054310002549926135573ca00226ea80048848cc00400c00880048c8cccd5cd19b8735573aa002900011bae357426aae7940088d407cd4c080cd5ce24810350543100021499261375400224464646666ae68cdc3a800a40084a00e46666ae68cdc3a8012400446a014600c6ae84d55cf280211999ab9a3370ea00690001280511a8111a981199ab9c490103505431000244992649926135573aa00226ea8004484888c00c0104488800844888004480048c8cccd5cd19b8750014800880188cccd5cd19b8750024800080188d4068d4c06ccd5ce249035054310001c499264984d55ce9baa0011220021220012001232323232323333573466e1d4005200c200b23333573466e1d4009200a200d23333573466e1d400d200823300b375c6ae854014dd69aba135744a00a46666ae68cdc3a8022400c46601a6eb8d5d0a8039bae357426ae89401c8cccd5cd19b875005480108cc048c050d5d0a8049bae357426ae8940248cccd5cd19b875006480088c050c054d5d09aab9e500b23333573466e1d401d2000230133016357426aae7940308d407cd4c080cd5ce2481035054310002149926499264992649926135573aa00826aae79400c4d55cf280109aab9e500113754002424444444600e01044244444446600c012010424444444600a010244444440082444444400644244444446600401201044244444446600201201040024646464646666ae68cdc3a800a400446660106eb4d5d0a8021bad35742a0066eb4d5d09aba2500323333573466e1d400920002300a300b357426aae7940188d4040d4c044cd5ce2490350543100012499264984d55cea80189aba25001135573ca00226ea80048488c00800c888488ccc00401401000c80048c8c8cccd5cd19b875001480088c018dd71aba135573ca00646666ae68cdc3a80124000460106eb8d5d09aab9e500423500a35300b3357389201035054310000c499264984d55cea80089baa001212230020032122300100320011122232323333573466e1cd55cea80124000466aa024600c6ae854008c014d5d09aba25002235007353008335738921035054310000949926135573ca00226ea8004498480048004848c004008800488848ccc00401000c00880044488008488488cc00401000c48004448848cc00400c0084480044880084880048004448c8c00400488cc00cc008008004cc8ccc888c8c8cc88cc88cc88ccc888ccc888cccccccc88888888cc88ccccc88888cccc8888cc88cc88cc88ccc888cc88ccc888cc88cc88cc88cc88ccc888cc88cc88cc88cc88c8c8c8c8c8c8cccc8888c8cc88c8c8c8c8c8c88888c8d4c14c01488d4c07c0188d4c0880048894cd4c09c02454cd4c1854cd4c184cc06d401c004418c4ccd5cd19b8f001003063062153353061332233355301e1200135020501f23535505e001223335530211200135023502223535506100122333535501d0012330694800000488cc1a80080048cc1a400520000013301200200133355301412001500f50343235302d001222222222233355301f120012235303d002222353045003223353068002253353074333573466e3c0580041d81d44cd411801401c401c801d40fc025401c00854cd4c184ccd5cd19b8833300c3300d500735355505d006222003489004881004820293a00c18818c4ccd5cd19b8833300c3300d50073535505b005220024881004881004820225e818818c4188418841884cc06d401c00c4d4c08c00488008888c8c8c004014c8004d5417088cd4d40b000520002235355057002225335305f333573466e3c0080241841804c01c0044c01800cc8004d5416c88cd4d40ac00520002235355056002225335305e333573466e3c00801c18017c40044c01800c88d4c0840088888888888ccd54c04c48005403940cccd54c034480048d4d5416c00488004ccd54c04c4800488d4c0c40088894cd4d40ec00484d4c0e801088cd4c174008802094cd4c1a4ccd5cd19b8f00101406b06a133503b3355064004006008100810045033009320013550562211225335350280011502a22133502b300400233553006120010040011223355300c1200123535504f0012233550520023355300f12001235355052001223355055002333535500e0012330594800000488cc1680080048cc164005200000133003002001223355300b1200123535504e001223355051002333535500a00123355300f120012353550520012233550550023550110010012233355500801100200123355300f1200123535505200122335505500235500f00100133355500300c0020011112223335530061200150253355300b1200123535504e00122335505100235500d00133355300612001223535504f002225335305733355301212001323350172233353500b003220020020013535009001220013350092253353059002105b1001058235355052001223300a0020050061003133502900400350260013355300b1200123535504e0012232335505200330010053200135505922533535029001135500d00322135355054002225335305c3300c002008133550120070011300600300212212330010030021200132001355050221122253353502300110022213300500233355300712001005004001112122230030041122122233002005004112122230010041120013200135504b22112253353501d0011501f2213350203004002335530061200100400122333573466e3c00800412c12888d4c04c00888888888894cd4d40a0ccd54c03448004cd4044894cd4d40a80088400c400540a494cd4c14cccd5cd19b8f00c00105505413502b0011502a00321055105332001355048221122253353501b001135350080032200122133353500a0052200230040023335530071200100500400113350052253353046002100110470461233500322333535006003220020020013535004001220011221233001003002120011221233001003002120012123001002200122212333001004003002200112200212200120012212330010030022001222222222212333333333300100b00aae68cdc380100080280209100109100090008891918008009119801980100100099911991199119801199aaa80224411d7175e003e0749ce453fc419933297de37f4e859324dc79d1156b3699f900483403d20ae11335500648811d711eae0514665de6ac91a0ba5387e76474ebda9cc70c7301cb7a125261004828270048848cc00400c008800444488848ccc00401000c0084448004448848cc00400c0084480041\"","export const languageViews =\n  \"a141005901d59f1a000302590001011a00060bc719026d00011a000249f01903e800011a000249f018201a0025cea81971f70419744d186419744d186419744d186419744d186419744d186419744d18641864186419744d18641a000249f018201a000249f018201a000249f018201a000249f01903e800011a000249f018201a000249f01903e800081a000242201a00067e2318760001011a000249f01903e800081a000249f01a0001b79818f7011a000249f0192710011a0002155e19052e011903e81a000249f01903e8011a000249f018201a000249f018201a000249f0182001011a000249f0011a000249f0041a000194af18f8011a000194af18f8011a0002377c190556011a0002bdea1901f1011a000249f018201a000249f018201a000249f018201a000249f018201a000249f018201a000249f018201a000242201a00067e23187600010119f04c192bd200011a000249f018201a000242201a00067e2318760001011a000242201a00067e2318760001011a0025cea81971f704001a000141bb041a000249f019138800011a000249f018201a000302590001011a000249f018201a000249f018201a000249f018201a000249f018201a000249f018201a000249f018201a000249f018201a00330da70101ff\";\n","class Loader {\n  async load() {\n    if (this._wasm) return;\n    /**\n     * @private\n     */\n    this._wasm = await import(\n      \"./custom_modules/@emurgo/cardano-serialization-lib-browser/cardano_serialization_lib\"\n    );\n  }\n\n  get Cardano() {\n    return this._wasm;\n  }\n}\n\nexport default new Loader();\n","import { Buffer } from \"buffer\";\nimport {\n  BigNum,\n  PlutusData,\n} from \"./custom_modules/@emurgo/cardano-serialization-lib-browser/cardano_serialization_lib\";\nimport Loader from \"./loader.js\";\n\nexport const fromHex = (hex) => Buffer.from(hex, \"hex\");\nexport const toHex = (bytes) => Buffer.from(bytes).toString(\"hex\");\nexport const toBytesNum = (num) =>\n  num\n    .toString()\n    .split(\"\")\n    .map((d) => \"3\" + d)\n    .join(\"\");\nexport const fromAscii = (hex) => Buffer.from(hex).toString(\"hex\");\n\nexport const assetsToValue = (assets) => {\n  const multiAsset = Loader.Cardano.MultiAsset.new();\n  const lovelace = assets.find((asset) => asset.unit === \"lovelace\");\n  const policies = [\n    ...new Set(\n      assets\n        .filter((asset) => asset.unit !== \"lovelace\")\n        .map((asset) => asset.unit.slice(0, 56))\n    ),\n  ];\n  policies.forEach((policy) => {\n    const policyAssets = assets.filter(\n      (asset) => asset.unit.slice(0, 56) === policy\n    );\n    const assetsValue = Loader.Cardano.Assets.new();\n    policyAssets.forEach((asset) => {\n      assetsValue.insert(\n        Loader.Cardano.AssetName.new(Buffer.from(asset.unit.slice(56), \"hex\")),\n        Loader.Cardano.BigNum.from_str(asset.quantity)\n      );\n    });\n    multiAsset.insert(\n      Loader.Cardano.ScriptHash.from_bytes(Buffer.from(policy, \"hex\")),\n      assetsValue\n    );\n  });\n  const value = Loader.Cardano.Value.new(\n    Loader.Cardano.BigNum.from_str(lovelace ? lovelace.quantity : \"0\")\n  );\n  if (assets.length > 1 || !lovelace) value.set_multiasset(multiAsset);\n  return value;\n};\n\nexport const assetsToDatum = (assets) => {\n  console.log(assets)\n  const multiAsset = Loader.Cardano.PlutusMap.new();\n  const lovelace = assets.find((asset) => asset.unit === \"lovelace\");\n  const loveMap = Loader.Cardano.PlutusMap.new();\n  const lovelaceName = Loader.Cardano.new_bytes(fromHex(\"\"));\n  const lovelaceVal = Loader.Cardano.new_integer(\n    Loader.Cardano.from_str(\"0\")\n  )\n  loveMap.insert(\n    lovelaceName,\n    lovelaceVal\n  )\n  console.log(\"checkpoint 1\")\n  multiAsset.insert(\n    Loader.Cardano.PlutusData.new_bytes(\"\"),\n    loveMap\n  );\n  console.log(\"checkpoint 2\")\n  const policies = [\n    ...new Set(\n      assets\n        .filter((asset) => asset.unit !== \"lovelace\")\n        .map((asset) => asset.unit.slice(0, 56))\n    ),\n  ];\n  console.log(\"checkpoint 3\")\n  policies.forEach((policy) => {\n    const policyAssets = assets.filter(\n      (asset) => asset.unit.slice(0, 56) === policy\n    );\n    const assetsValue = Loader.Cardano.PlutusMap.new();\n    policyAssets.forEach((asset) => {\n      assetsValue.insert(\n        Loader.Cardano.PlutusData.new_bytes(fromHex(Buffer.from(asset.unit.slice(56), \"hex\"))),\n        Loader.Cardano.PlutusData.new_integer(\n          Loader.Cardano.BigNum.from_str(asset.quantity)\n        )\n      );\n    });\n    multiAsset.insert(\n      Loader.Cardano.PlutusData.new_bytes(fromHex(Buffer.from(policy, \"hex\"))),\n      assetsValue\n    );\n  });\n  return multiAsset;\n};\n\nexport const valueToAssets = (value) => {\n  const assets = [];\n  assets.push({ unit: \"lovelace\", quantity: value.coin().to_str() });\n  if (value.multiasset()) {\n    const multiAssets = value.multiasset().keys();\n    for (let j = 0; j < multiAssets.len(); j++) {\n      const policy = multiAssets.get(j);\n      const policyAssets = value.multiasset().get(policy);\n      const assetNames = policyAssets.keys();\n      for (let k = 0; k < assetNames.len(); k++) {\n        const policyAsset = assetNames.get(k);\n        const quantity = policyAssets.get(policyAsset);\n        const asset =\n          Buffer.from(policy.to_bytes(), \"hex\").toString(\"hex\") +\n          Buffer.from(policyAsset.name(), \"hex\").toString(\"hex\");\n        assets.push({\n          unit: asset,\n          quantity: quantity.to_str(),\n        });\n      }\n    }\n  }\n  return assets;\n};\n\n/**\n *\n * @param {PlutusData} datum\n */\nexport const getTradeDetails = (datum) => {\n  const tradeDetails = datum\n    .as_constr_plutus_data()\n    .data()\n    .get(0)\n    .as_constr_plutus_data()\n    .data();\n  return {\n    tradeOwner: Loader.Cardano.Ed25519KeyHash.from_bytes(\n      tradeDetails.get(0).as_bytes()\n    ),\n    requestedAmount: tradeDetails.get(1).as_integer().as_u64(),\n    privateRecip: toHex(tradeDetails.get(2).as_bytes()),\n  };\n};\n\nexport const getOfferInfo = (datum) => {\n  const offerInfo = datum\n  .as_constr_plutus_data()\n  .data()\n  .get()\n  .as_constr_plutus_data()\n  .data();\n  return offerInfo;\n}\n\n/**\n *\n * @param {BigNum} amount\n * @param {BigNum} p\n */\nexport const lovelacePercentage = (amount, p) => {\n  return amount\n    .checked_mul(Loader.Cardano.BigNum.from_str(\"10\"))\n    .checked_div(p);\n};\n"],"names":["secrets","PROJECT_ID","BigInt","window","protocolParameters","CoinSelection","setProtocolParameters","minUTxO","minFeeA","minFeeB","maxTxSize","randomImprove","inputs","outputs","limit","preset","Error","_minUTxOValue","len","amount","Loader","i","length","addAmounts","output","utxoSelection","selection","remaining","subset","mergedOutputsAmounts","compiledAmountList","get","mergeOutputsAmounts","splitOutputsAmounts","amounts","splitAmounts","multiasset","mA","keys","scriptHash","j","_assets","assetName","insert","to_bytes","_multiasset","_value","set_multiasset","push","sortAmountList","coin","createSubSet","select","range","ideal","checked_add","maximum","improve","change","checked_sub","minAmount","maxFee","toString","compare","minAda","input","outputAmount","minUTxOValue","randomSelect","cloneUTxOList","cloneValue","cloneUTxOSelection","e","message","sort","a","b","Number","searchAmountValue","isQtyFulfilled","utxo","splice","pop","descSelect","nbFreeUTxO","Math","floor","random","newAmount","abs","getAmountValue","compiledAmounts","amountList","sortOrder","sortInt","val","lovelace","to_str","needle","haystack","undefined","cumulatedAmount","utxoList","map","value","big","group","candidate","gQty","cQty","cScriptHash","cAssetName","CONTRACT","scripts","add","fromHex","CONTRACT_ADDRESS","OFFER","tradeOwner","requestedAmount","privateRecip","fieldsInner","tradeDetails","DATUM_TYPE","Offer","BUY","index","redeemerData","CANCEL","Escrow","base","projectId","this","provider","blockfrostRequest","endpoint","headers","body","fetch","project_id","method","then","res","json","getUtxo","offer","to_bech32","utxos","filter","assetsToValue","console","log","JSON","stringify","Promise","all","tx_hash","output_index","initTx","txBuilder","linearFee","minUtxo","poolDeposit","keyDeposit","maxValSize","priceMem","priceStep","Buffer","from","datums","metadata","createOutput","address","datum","tradeOwnerAddress","set_coin","set_data_hash","toHex","to_address","setCollateral","forEach","set_collateral","finalizeTx","changeAddress","scriptUtxo","action","transactionWitnessSet","add_input","add_output","redeemers","redeemerIndex","index_of_input","set_redeemers","set_plutus_data","set_plutus_scripts","cardano","getCollateral","collateral","aux_data","generalMetadata","Object","label","set_metadata","set_auxiliary_data","changeMultiAssets","partialChange","partialMultiAssets","policies","policy","policyAssets","assetNames","assets","k","policyAsset","quantity","checkMultiAssets","checkValue","makeSplit","add_change_if_needed","txBody","build","tx","size","signTx","txVkeyWitnesses","set_vkeys","vkeys","signedTx","auxiliary_data","submitTx","txHash","load","p","min_fee_a","min_fee_b","contractInfo","owner1","fee1","fee2","owner2","fee","getUsedAddresses","from_bytes","walletAddress","from_address","getUtxos","offerDatum","payment_cred","to_keyhash","getOffer","offerUtxo","purchase","nTradeOwnerAddress","numDatum","valueToAssets","unit","requiredSigners","set_required_signers","cancelOffer","_wasm","hex","bytes","fromAscii","multiAsset","find","asset","Set","slice","assetsValue","multiAssets","name"],"sourceRoot":""}